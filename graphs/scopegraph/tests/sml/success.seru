class SimpleClass {
	constructor Declare() { return SimpleClass.new() }
}

class PropsClass {
	var something string
	var somethingElse int = 2
}

function FunctionWithPropsClass(props PropsClass) string {
	return props.something
}

class ClassWithProps {
	constructor Declare(props []{string}) {
		return ClassWithProps.new()
	}
}

function FuncWithProps(props []{any}) int {
	return 42
}

struct SomePropsStruct {
	PropA int
	PropB string
	PropC bool?
}

function WithPropsStruct(props SomePropsStruct) SomePropsStruct {
	return props
}

function WithOptionalChild(props []{any}, child string?) string {
	return child ?? 'default!'
}

function WithRequiredChild(props []{any}, child string) string {
	return child
}

function ChildStream(props []{any}, child int*) bool {
	return true
}

class AnotherClass {}

class ThirdClass {}

function SomeCoolDecorator(decorated SimpleClass, value bool) AnotherClass {
	return AnotherClass.new()
}

function ChainedDecorator(decorated AnotherClass, value string) ThirdClass {
	return ThirdClass.new()
}

function SubtypeDecorator(decorated any, value any) int {
	return 42
}

function DoSomething(someStream int*) {
	/* simple */<SimpleClass />
	/* classwithprops */<ClassWithProps a="hello" b="wassup" />
	/* funcwithprops */<FuncWithProps a="hello" b="wassup" />

	/* propsstruct */<WithPropsStruct PropA={123} PropB="hello" PropC />

	/* optionalchild */<WithOptionalChild />
	/* optionalchild2 */<WithOptionalChild>hello world!</WithOptionalChild>

	/* requiredchild */<WithRequiredChild>hello world!</WithRequiredChild>

	/* childstream1 */<ChildStream />
	/* childstream2 */<ChildStream />
	/* childstream3 */<ChildStream>
		{1}
		{2}
		{3}
	</ChildStream>
	/* childstream4 */<ChildStream>{value for value in someStream}</ChildStream>

	/* decorator */<SimpleClass @SomeCoolDecorator={false} />
	/* decorator2 */<SimpleClass @SomeCoolDecorator />

	/* chaineddecorator */<SimpleClass @SomeCoolDecorator
	                                   @ChainedDecorator="somevalue" />

	/* subtypedecorator */<SimpleClass @SubtypeDecorator="foo" />

	/* propsclass */<FunctionWithPropsClass something="hello" />
	/* propsclass2 */<FunctionWithPropsClass something="hello" somethingElse={42} />
	/* propsclass3 */<FunctionWithPropsClass somethingElse={42}>
		<.something>hello</.something>
	</FunctionWithPropsClass>
}
