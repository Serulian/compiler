class SomeType {
	function DoSomething() {}
}

type MyType : SomeType {
	function AnotherFunction() {
		/* this */(this)
		/* sometype */(SomeType(this))
		SomeType(this).DoSomething()
	}
}

type AnotherType : MyType {
	function AnotherFunction() {
		MyType(this)
		SomeType(this)
	}
}

type GenericType<T> : MyType {
	function DoSomething(someParam T) T {
		return someParam
	}
}

function CoolFunction(m MyType) {
	/* m */(m)
	m.AnotherFunction()

	/* at */(AnotherType(m))
	/* gt */(GenericType<int>(m))

	var nm MyType? = m
	/* nat */(AnotherType(nm))
}
