// Code generated by protoc-gen-gogo.
// source: scopeinfo.proto
// DO NOT EDIT!

/*
	Package proto is a generated protocol buffer package.

	It is generated from these files:
		scopeinfo.proto

	It has these top-level messages:
		ScopeInfo
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ScopeKind int32

const (
	ScopeKind_VALUE   ScopeKind = 0
	ScopeKind_GENERIC ScopeKind = 1
	ScopeKind_STATIC  ScopeKind = 2
)

var ScopeKind_name = map[int32]string{
	0: "VALUE",
	1: "GENERIC",
	2: "STATIC",
}
var ScopeKind_value = map[string]int32{
	"VALUE":   0,
	"GENERIC": 1,
	"STATIC":  2,
}

func (x ScopeKind) Enum() *ScopeKind {
	p := new(ScopeKind)
	*p = x
	return p
}
func (x ScopeKind) String() string {
	return proto1.EnumName(ScopeKind_name, int32(x))
}
func (x *ScopeKind) UnmarshalJSON(data []byte) error {
	value, err := proto1.UnmarshalJSONEnum(ScopeKind_value, data, "ScopeKind")
	if err != nil {
		return err
	}
	*x = ScopeKind(value)
	return nil
}

type ScopeInfo struct {
	IsValid                *bool      `protobuf:"varint,1,opt,name=IsValid" json:"IsValid,omitempty"`
	Kind                   *ScopeKind `protobuf:"varint,2,opt,name=Kind,enum=proto.ScopeKind,def=0" json:"Kind,omitempty"`
	ResolvedType           *string    `protobuf:"bytes,3,opt,name=ResolvedType" json:"ResolvedType,omitempty"`
	ReturnedType           *string    `protobuf:"bytes,4,opt,name=ReturnedType" json:"ReturnedType,omitempty"`
	AssignableType         *string    `protobuf:"bytes,5,opt,name=AssignableType" json:"AssignableType,omitempty"`
	IsTerminatingStatement *bool      `protobuf:"varint,6,opt,name=IsTerminatingStatement" json:"IsTerminatingStatement,omitempty"`
	XXX_unrecognized       []byte     `json:"-"`
}

func (m *ScopeInfo) Reset()         { *m = ScopeInfo{} }
func (m *ScopeInfo) String() string { return proto1.CompactTextString(m) }
func (*ScopeInfo) ProtoMessage()    {}

const Default_ScopeInfo_Kind ScopeKind = ScopeKind_VALUE

func (m *ScopeInfo) GetIsValid() bool {
	if m != nil && m.IsValid != nil {
		return *m.IsValid
	}
	return false
}

func (m *ScopeInfo) GetKind() ScopeKind {
	if m != nil && m.Kind != nil {
		return *m.Kind
	}
	return Default_ScopeInfo_Kind
}

func (m *ScopeInfo) GetResolvedType() string {
	if m != nil && m.ResolvedType != nil {
		return *m.ResolvedType
	}
	return ""
}

func (m *ScopeInfo) GetReturnedType() string {
	if m != nil && m.ReturnedType != nil {
		return *m.ReturnedType
	}
	return ""
}

func (m *ScopeInfo) GetAssignableType() string {
	if m != nil && m.AssignableType != nil {
		return *m.AssignableType
	}
	return ""
}

func (m *ScopeInfo) GetIsTerminatingStatement() bool {
	if m != nil && m.IsTerminatingStatement != nil {
		return *m.IsTerminatingStatement
	}
	return false
}

func init() {
	proto1.RegisterEnum("proto.ScopeKind", ScopeKind_name, ScopeKind_value)
}
func (m *ScopeInfo) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ScopeInfo) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsValid != nil {
		data[i] = 0x8
		i++
		if *m.IsValid {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.Kind != nil {
		data[i] = 0x10
		i++
		i = encodeVarintScopeinfo(data, i, uint64(*m.Kind))
	}
	if m.ResolvedType != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintScopeinfo(data, i, uint64(len(*m.ResolvedType)))
		i += copy(data[i:], *m.ResolvedType)
	}
	if m.ReturnedType != nil {
		data[i] = 0x22
		i++
		i = encodeVarintScopeinfo(data, i, uint64(len(*m.ReturnedType)))
		i += copy(data[i:], *m.ReturnedType)
	}
	if m.AssignableType != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintScopeinfo(data, i, uint64(len(*m.AssignableType)))
		i += copy(data[i:], *m.AssignableType)
	}
	if m.IsTerminatingStatement != nil {
		data[i] = 0x30
		i++
		if *m.IsTerminatingStatement {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeFixed64Scopeinfo(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Scopeinfo(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintScopeinfo(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *ScopeInfo) Size() (n int) {
	var l int
	_ = l
	if m.IsValid != nil {
		n += 2
	}
	if m.Kind != nil {
		n += 1 + sovScopeinfo(uint64(*m.Kind))
	}
	if m.ResolvedType != nil {
		l = len(*m.ResolvedType)
		n += 1 + l + sovScopeinfo(uint64(l))
	}
	if m.ReturnedType != nil {
		l = len(*m.ReturnedType)
		n += 1 + l + sovScopeinfo(uint64(l))
	}
	if m.AssignableType != nil {
		l = len(*m.AssignableType)
		n += 1 + l + sovScopeinfo(uint64(l))
	}
	if m.IsTerminatingStatement != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovScopeinfo(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozScopeinfo(x uint64) (n int) {
	return sovScopeinfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ScopeInfo) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScopeinfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScopeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScopeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsValid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScopeinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsValid = &b
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var v ScopeKind
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScopeinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (ScopeKind(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Kind = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolvedType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScopeinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScopeinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.ResolvedType = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnedType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScopeinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScopeinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.ReturnedType = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssignableType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScopeinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScopeinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.AssignableType = &s
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTerminatingStatement", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScopeinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsTerminatingStatement = &b
		default:
			iNdEx = preIndex
			skippy, err := skipScopeinfo(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScopeinfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipScopeinfo(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowScopeinfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowScopeinfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowScopeinfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthScopeinfo
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowScopeinfo
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipScopeinfo(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthScopeinfo = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowScopeinfo   = fmt.Errorf("proto: integer overflow")
)
