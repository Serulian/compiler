// Code generated by protoc-gen-gogo.
// source: scopeinfo.proto
// DO NOT EDIT!

/*
	Package proto is a generated protocol buffer package.

	It is generated from these files:
		scopeinfo.proto

	It has these top-level messages:
		ScopeInfo
		ScopeReference
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type ScopeKind int32

const (
	ScopeKind_VALUE   ScopeKind = 0
	ScopeKind_GENERIC ScopeKind = 1
	ScopeKind_STATIC  ScopeKind = 2
)

var ScopeKind_name = map[int32]string{
	0: "VALUE",
	1: "GENERIC",
	2: "STATIC",
}
var ScopeKind_value = map[string]int32{
	"VALUE":   0,
	"GENERIC": 1,
	"STATIC":  2,
}

func (x ScopeKind) String() string {
	return proto1.EnumName(ScopeKind_name, int32(x))
}
func (ScopeKind) EnumDescriptor() ([]byte, []int) { return fileDescriptorScopeinfo, []int{0} }

type ScopeLabel int32

const (
	ScopeLabel_UNUSED                   ScopeLabel = 0
	ScopeLabel_STREAM_LOOP              ScopeLabel = 1
	ScopeLabel_STREAMABLE_LOOP          ScopeLabel = 2
	ScopeLabel_GENERATOR_STATEMENT      ScopeLabel = 3
	ScopeLabel_SML_FUNCTION             ScopeLabel = 4
	ScopeLabel_SML_CONSTRUCTOR          ScopeLabel = 5
	ScopeLabel_SML_SINGLE_CHILD         ScopeLabel = 6
	ScopeLabel_SML_STREAM_CHILD         ScopeLabel = 7
	ScopeLabel_SML_NO_CHILDREN          ScopeLabel = 8
	ScopeLabel_SML_CHILDREN             ScopeLabel = 9
	ScopeLabel_SML_PROPS_MAPPING        ScopeLabel = 13
	ScopeLabel_SML_PROPS_CLASS          ScopeLabel = 14
	ScopeLabel_SML_PROPS_STRUCT         ScopeLabel = 15
	ScopeLabel_NOMINALLY_SHORTCUT_EXPR  ScopeLabel = 10
	ScopeLabel_STRUCTURAL_UPDATE_EXPR   ScopeLabel = 11
	ScopeLabel_STRUCTURAL_FUNCTION_EXPR ScopeLabel = 22
	ScopeLabel_BROKEN_FLOW              ScopeLabel = 12
	ScopeLabel_AWAITS                   ScopeLabel = 16
	ScopeLabel_CALLS_ANONYMOUS_CLOSURE  ScopeLabel = 17
	// Marks member nodes with whether their implementation is promising, as computed by the scope
	// system.
	ScopeLabel_SML_PROMISING_NO    ScopeLabel = 18
	ScopeLabel_SML_PROMISING_MAYBE ScopeLabel = 19
	ScopeLabel_SML_PROMISING_YES   ScopeLabel = 20
	// Marks an expression as referencing the constructor of an agent.
	ScopeLabel_AGENT_CONSTRUCTOR_REF ScopeLabel = 21
	ScopeLabel_SML_CHILD_YIELD_VALUE ScopeLabel = 23
	ScopeLabel_SML_CHILD_YIELD_FROM  ScopeLabel = 24
	ScopeLabel_HAS_RETURN            ScopeLabel = 25
)

var ScopeLabel_name = map[int32]string{
	0:  "UNUSED",
	1:  "STREAM_LOOP",
	2:  "STREAMABLE_LOOP",
	3:  "GENERATOR_STATEMENT",
	4:  "SML_FUNCTION",
	5:  "SML_CONSTRUCTOR",
	6:  "SML_SINGLE_CHILD",
	7:  "SML_STREAM_CHILD",
	8:  "SML_NO_CHILDREN",
	9:  "SML_CHILDREN",
	13: "SML_PROPS_MAPPING",
	14: "SML_PROPS_CLASS",
	15: "SML_PROPS_STRUCT",
	10: "NOMINALLY_SHORTCUT_EXPR",
	11: "STRUCTURAL_UPDATE_EXPR",
	22: "STRUCTURAL_FUNCTION_EXPR",
	12: "BROKEN_FLOW",
	16: "AWAITS",
	17: "CALLS_ANONYMOUS_CLOSURE",
	18: "SML_PROMISING_NO",
	19: "SML_PROMISING_MAYBE",
	20: "SML_PROMISING_YES",
	21: "AGENT_CONSTRUCTOR_REF",
	23: "SML_CHILD_YIELD_VALUE",
	24: "SML_CHILD_YIELD_FROM",
	25: "HAS_RETURN",
}
var ScopeLabel_value = map[string]int32{
	"UNUSED":                   0,
	"STREAM_LOOP":              1,
	"STREAMABLE_LOOP":          2,
	"GENERATOR_STATEMENT":      3,
	"SML_FUNCTION":             4,
	"SML_CONSTRUCTOR":          5,
	"SML_SINGLE_CHILD":         6,
	"SML_STREAM_CHILD":         7,
	"SML_NO_CHILDREN":          8,
	"SML_CHILDREN":             9,
	"SML_PROPS_MAPPING":        13,
	"SML_PROPS_CLASS":          14,
	"SML_PROPS_STRUCT":         15,
	"NOMINALLY_SHORTCUT_EXPR":  10,
	"STRUCTURAL_UPDATE_EXPR":   11,
	"STRUCTURAL_FUNCTION_EXPR": 22,
	"BROKEN_FLOW":              12,
	"AWAITS":                   16,
	"CALLS_ANONYMOUS_CLOSURE":  17,
	"SML_PROMISING_NO":         18,
	"SML_PROMISING_MAYBE":      19,
	"SML_PROMISING_YES":        20,
	"AGENT_CONSTRUCTOR_REF":    21,
	"SML_CHILD_YIELD_VALUE":    23,
	"SML_CHILD_YIELD_FROM":     24,
	"HAS_RETURN":               25,
}

func (x ScopeLabel) String() string {
	return proto1.EnumName(ScopeLabel_name, int32(x))
}
func (ScopeLabel) EnumDescriptor() ([]byte, []int) { return fileDescriptorScopeinfo, []int{1} }

type ScopeInfo struct {
	IsValid                bool                  `protobuf:"varint,1,opt,name=IsValid,proto3" json:"IsValid,omitempty"`
	Kind                   ScopeKind             `protobuf:"varint,2,opt,name=Kind,proto3,enum=proto.ScopeKind" json:"Kind,omitempty"`
	NamedReference         *ScopeReference       `protobuf:"bytes,8,opt,name=NamedReference" json:"NamedReference,omitempty"`
	CalledOpReference      *ScopeReference       `protobuf:"bytes,9,opt,name=CalledOpReference" json:"CalledOpReference,omitempty"`
	TargetedReference      *ScopeReference       `protobuf:"bytes,14,opt,name=TargetedReference" json:"TargetedReference,omitempty"`
	ResolvedType           string                `protobuf:"bytes,3,opt,name=ResolvedType,proto3" json:"ResolvedType,omitempty"`
	ReturnedType           string                `protobuf:"bytes,4,opt,name=ReturnedType,proto3" json:"ReturnedType,omitempty"`
	AssignableType         string                `protobuf:"bytes,5,opt,name=AssignableType,proto3" json:"AssignableType,omitempty"`
	StaticType             string                `protobuf:"bytes,6,opt,name=StaticType,proto3" json:"StaticType,omitempty"`
	GenericType            string                `protobuf:"bytes,13,opt,name=GenericType,proto3" json:"GenericType,omitempty"`
	IsTerminatingStatement bool                  `protobuf:"varint,7,opt,name=IsTerminatingStatement,proto3" json:"IsTerminatingStatement,omitempty"`
	IsSettlingScope        bool                  `protobuf:"varint,10,opt,name=IsSettlingScope,proto3" json:"IsSettlingScope,omitempty"`
	IsAnonymousReference   bool                  `protobuf:"varint,11,opt,name=IsAnonymousReference,proto3" json:"IsAnonymousReference,omitempty"`
	Labels                 []ScopeLabel          `protobuf:"varint,12,rep,packed,name=Labels,enum=proto.ScopeLabel" json:"Labels,omitempty"`
	StaticDependencies     []*ScopeReference     `protobuf:"bytes,15,rep,name=StaticDependencies" json:"StaticDependencies,omitempty"`
	DynamicDependencies    []string              `protobuf:"bytes,16,rep,name=DynamicDependencies" json:"DynamicDependencies,omitempty"`
	Awaits                 bool                  `protobuf:"varint,17,opt,name=Awaits,proto3" json:"Awaits,omitempty"`
	Attributes             map[string]*ScopeInfo `protobuf:"bytes,18,rep,name=Attributes" json:"Attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ScopeInfo) Reset()                    { *m = ScopeInfo{} }
func (m *ScopeInfo) String() string            { return proto1.CompactTextString(m) }
func (*ScopeInfo) ProtoMessage()               {}
func (*ScopeInfo) Descriptor() ([]byte, []int) { return fileDescriptorScopeinfo, []int{0} }

func (m *ScopeInfo) GetIsValid() bool {
	if m != nil {
		return m.IsValid
	}
	return false
}

func (m *ScopeInfo) GetKind() ScopeKind {
	if m != nil {
		return m.Kind
	}
	return ScopeKind_VALUE
}

func (m *ScopeInfo) GetNamedReference() *ScopeReference {
	if m != nil {
		return m.NamedReference
	}
	return nil
}

func (m *ScopeInfo) GetCalledOpReference() *ScopeReference {
	if m != nil {
		return m.CalledOpReference
	}
	return nil
}

func (m *ScopeInfo) GetTargetedReference() *ScopeReference {
	if m != nil {
		return m.TargetedReference
	}
	return nil
}

func (m *ScopeInfo) GetResolvedType() string {
	if m != nil {
		return m.ResolvedType
	}
	return ""
}

func (m *ScopeInfo) GetReturnedType() string {
	if m != nil {
		return m.ReturnedType
	}
	return ""
}

func (m *ScopeInfo) GetAssignableType() string {
	if m != nil {
		return m.AssignableType
	}
	return ""
}

func (m *ScopeInfo) GetStaticType() string {
	if m != nil {
		return m.StaticType
	}
	return ""
}

func (m *ScopeInfo) GetGenericType() string {
	if m != nil {
		return m.GenericType
	}
	return ""
}

func (m *ScopeInfo) GetIsTerminatingStatement() bool {
	if m != nil {
		return m.IsTerminatingStatement
	}
	return false
}

func (m *ScopeInfo) GetIsSettlingScope() bool {
	if m != nil {
		return m.IsSettlingScope
	}
	return false
}

func (m *ScopeInfo) GetIsAnonymousReference() bool {
	if m != nil {
		return m.IsAnonymousReference
	}
	return false
}

func (m *ScopeInfo) GetLabels() []ScopeLabel {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *ScopeInfo) GetStaticDependencies() []*ScopeReference {
	if m != nil {
		return m.StaticDependencies
	}
	return nil
}

func (m *ScopeInfo) GetDynamicDependencies() []string {
	if m != nil {
		return m.DynamicDependencies
	}
	return nil
}

func (m *ScopeInfo) GetAwaits() bool {
	if m != nil {
		return m.Awaits
	}
	return false
}

func (m *ScopeInfo) GetAttributes() map[string]*ScopeInfo {
	if m != nil {
		return m.Attributes
	}
	return nil
}

type ScopeReference struct {
	ReferencedNode string `protobuf:"bytes,1,opt,name=ReferencedNode,proto3" json:"ReferencedNode,omitempty"`
	IsSRGNode      bool   `protobuf:"varint,2,opt,name=IsSRGNode,proto3" json:"IsSRGNode,omitempty"`
}

func (m *ScopeReference) Reset()                    { *m = ScopeReference{} }
func (m *ScopeReference) String() string            { return proto1.CompactTextString(m) }
func (*ScopeReference) ProtoMessage()               {}
func (*ScopeReference) Descriptor() ([]byte, []int) { return fileDescriptorScopeinfo, []int{1} }

func (m *ScopeReference) GetReferencedNode() string {
	if m != nil {
		return m.ReferencedNode
	}
	return ""
}

func (m *ScopeReference) GetIsSRGNode() bool {
	if m != nil {
		return m.IsSRGNode
	}
	return false
}

func init() {
	proto1.RegisterType((*ScopeInfo)(nil), "proto.ScopeInfo")
	proto1.RegisterType((*ScopeReference)(nil), "proto.ScopeReference")
	proto1.RegisterEnum("proto.ScopeKind", ScopeKind_name, ScopeKind_value)
	proto1.RegisterEnum("proto.ScopeLabel", ScopeLabel_name, ScopeLabel_value)
}
func (m *ScopeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScopeInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsValid {
		dAtA[i] = 0x8
		i++
		if m.IsValid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Kind != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintScopeinfo(dAtA, i, uint64(m.Kind))
	}
	if len(m.ResolvedType) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintScopeinfo(dAtA, i, uint64(len(m.ResolvedType)))
		i += copy(dAtA[i:], m.ResolvedType)
	}
	if len(m.ReturnedType) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintScopeinfo(dAtA, i, uint64(len(m.ReturnedType)))
		i += copy(dAtA[i:], m.ReturnedType)
	}
	if len(m.AssignableType) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintScopeinfo(dAtA, i, uint64(len(m.AssignableType)))
		i += copy(dAtA[i:], m.AssignableType)
	}
	if len(m.StaticType) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintScopeinfo(dAtA, i, uint64(len(m.StaticType)))
		i += copy(dAtA[i:], m.StaticType)
	}
	if m.IsTerminatingStatement {
		dAtA[i] = 0x38
		i++
		if m.IsTerminatingStatement {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.NamedReference != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintScopeinfo(dAtA, i, uint64(m.NamedReference.Size()))
		n1, err := m.NamedReference.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.CalledOpReference != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintScopeinfo(dAtA, i, uint64(m.CalledOpReference.Size()))
		n2, err := m.CalledOpReference.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.IsSettlingScope {
		dAtA[i] = 0x50
		i++
		if m.IsSettlingScope {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsAnonymousReference {
		dAtA[i] = 0x58
		i++
		if m.IsAnonymousReference {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Labels) > 0 {
		dAtA4 := make([]byte, len(m.Labels)*10)
		var j3 int
		for _, num := range m.Labels {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x62
		i++
		i = encodeVarintScopeinfo(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if len(m.GenericType) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintScopeinfo(dAtA, i, uint64(len(m.GenericType)))
		i += copy(dAtA[i:], m.GenericType)
	}
	if m.TargetedReference != nil {
		dAtA[i] = 0x72
		i++
		i = encodeVarintScopeinfo(dAtA, i, uint64(m.TargetedReference.Size()))
		n5, err := m.TargetedReference.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.StaticDependencies) > 0 {
		for _, msg := range m.StaticDependencies {
			dAtA[i] = 0x7a
			i++
			i = encodeVarintScopeinfo(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.DynamicDependencies) > 0 {
		for _, s := range m.DynamicDependencies {
			dAtA[i] = 0x82
			i++
			dAtA[i] = 0x1
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Awaits {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		if m.Awaits {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Attributes) > 0 {
		for k, _ := range m.Attributes {
			dAtA[i] = 0x92
			i++
			dAtA[i] = 0x1
			i++
			v := m.Attributes[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovScopeinfo(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovScopeinfo(uint64(len(k))) + msgSize
			i = encodeVarintScopeinfo(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintScopeinfo(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintScopeinfo(dAtA, i, uint64(v.Size()))
				n6, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n6
			}
		}
	}
	return i, nil
}

func (m *ScopeReference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ScopeReference) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ReferencedNode) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintScopeinfo(dAtA, i, uint64(len(m.ReferencedNode)))
		i += copy(dAtA[i:], m.ReferencedNode)
	}
	if m.IsSRGNode {
		dAtA[i] = 0x10
		i++
		if m.IsSRGNode {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeFixed64Scopeinfo(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Scopeinfo(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintScopeinfo(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ScopeInfo) Size() (n int) {
	var l int
	_ = l
	if m.IsValid {
		n += 2
	}
	if m.Kind != 0 {
		n += 1 + sovScopeinfo(uint64(m.Kind))
	}
	l = len(m.ResolvedType)
	if l > 0 {
		n += 1 + l + sovScopeinfo(uint64(l))
	}
	l = len(m.ReturnedType)
	if l > 0 {
		n += 1 + l + sovScopeinfo(uint64(l))
	}
	l = len(m.AssignableType)
	if l > 0 {
		n += 1 + l + sovScopeinfo(uint64(l))
	}
	l = len(m.StaticType)
	if l > 0 {
		n += 1 + l + sovScopeinfo(uint64(l))
	}
	if m.IsTerminatingStatement {
		n += 2
	}
	if m.NamedReference != nil {
		l = m.NamedReference.Size()
		n += 1 + l + sovScopeinfo(uint64(l))
	}
	if m.CalledOpReference != nil {
		l = m.CalledOpReference.Size()
		n += 1 + l + sovScopeinfo(uint64(l))
	}
	if m.IsSettlingScope {
		n += 2
	}
	if m.IsAnonymousReference {
		n += 2
	}
	if len(m.Labels) > 0 {
		l = 0
		for _, e := range m.Labels {
			l += sovScopeinfo(uint64(e))
		}
		n += 1 + sovScopeinfo(uint64(l)) + l
	}
	l = len(m.GenericType)
	if l > 0 {
		n += 1 + l + sovScopeinfo(uint64(l))
	}
	if m.TargetedReference != nil {
		l = m.TargetedReference.Size()
		n += 1 + l + sovScopeinfo(uint64(l))
	}
	if len(m.StaticDependencies) > 0 {
		for _, e := range m.StaticDependencies {
			l = e.Size()
			n += 1 + l + sovScopeinfo(uint64(l))
		}
	}
	if len(m.DynamicDependencies) > 0 {
		for _, s := range m.DynamicDependencies {
			l = len(s)
			n += 2 + l + sovScopeinfo(uint64(l))
		}
	}
	if m.Awaits {
		n += 3
	}
	if len(m.Attributes) > 0 {
		for k, v := range m.Attributes {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovScopeinfo(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovScopeinfo(uint64(len(k))) + l
			n += mapEntrySize + 2 + sovScopeinfo(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ScopeReference) Size() (n int) {
	var l int
	_ = l
	l = len(m.ReferencedNode)
	if l > 0 {
		n += 1 + l + sovScopeinfo(uint64(l))
	}
	if m.IsSRGNode {
		n += 2
	}
	return n
}

func sovScopeinfo(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozScopeinfo(x uint64) (n int) {
	return sovScopeinfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ScopeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScopeinfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScopeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScopeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsValid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScopeinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsValid = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScopeinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= (ScopeKind(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolvedType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScopeinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScopeinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResolvedType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnedType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScopeinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScopeinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnedType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssignableType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScopeinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScopeinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssignableType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaticType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScopeinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScopeinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StaticType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTerminatingStatement", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScopeinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsTerminatingStatement = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamedReference", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScopeinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScopeinfo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NamedReference == nil {
				m.NamedReference = &ScopeReference{}
			}
			if err := m.NamedReference.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CalledOpReference", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScopeinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScopeinfo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CalledOpReference == nil {
				m.CalledOpReference = &ScopeReference{}
			}
			if err := m.CalledOpReference.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSettlingScope", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScopeinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSettlingScope = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAnonymousReference", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScopeinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAnonymousReference = bool(v != 0)
		case 12:
			if wireType == 0 {
				var v ScopeLabel
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScopeinfo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (ScopeLabel(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Labels = append(m.Labels, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScopeinfo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthScopeinfo
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v ScopeLabel
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScopeinfo
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (ScopeLabel(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Labels = append(m.Labels, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenericType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScopeinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScopeinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GenericType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetedReference", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScopeinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScopeinfo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TargetedReference == nil {
				m.TargetedReference = &ScopeReference{}
			}
			if err := m.TargetedReference.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaticDependencies", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScopeinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScopeinfo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StaticDependencies = append(m.StaticDependencies, &ScopeReference{})
			if err := m.StaticDependencies[len(m.StaticDependencies)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DynamicDependencies", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScopeinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScopeinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DynamicDependencies = append(m.DynamicDependencies, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Awaits", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScopeinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Awaits = bool(v != 0)
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScopeinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScopeinfo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScopeinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScopeinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthScopeinfo
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Attributes == nil {
				m.Attributes = make(map[string]*ScopeInfo)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScopeinfo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapmsglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScopeinfo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapmsglen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if mapmsglen < 0 {
					return ErrInvalidLengthScopeinfo
				}
				postmsgIndex := iNdEx + mapmsglen
				if mapmsglen < 0 {
					return ErrInvalidLengthScopeinfo
				}
				if postmsgIndex > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := &ScopeInfo{}
				if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
					return err
				}
				iNdEx = postmsgIndex
				m.Attributes[mapkey] = mapvalue
			} else {
				var mapvalue *ScopeInfo
				m.Attributes[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScopeinfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScopeinfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScopeReference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScopeinfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScopeReference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScopeReference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferencedNode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScopeinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScopeinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReferencedNode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSRGNode", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScopeinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSRGNode = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipScopeinfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScopeinfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipScopeinfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowScopeinfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowScopeinfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowScopeinfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthScopeinfo
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowScopeinfo
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipScopeinfo(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthScopeinfo = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowScopeinfo   = fmt.Errorf("proto: integer overflow")
)

func init() { proto1.RegisterFile("scopeinfo.proto", fileDescriptorScopeinfo) }

var fileDescriptorScopeinfo = []byte{
	// 881 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x94, 0xdb, 0x6e, 0xe2, 0x46,
	0x18, 0xc7, 0xd7, 0x21, 0x40, 0xf8, 0xc8, 0xc2, 0x30, 0x39, 0x79, 0xb7, 0x2b, 0x84, 0xa2, 0x6a,
	0x45, 0xf7, 0x22, 0xad, 0x52, 0xa9, 0xaa, 0x2a, 0x55, 0xea, 0xc4, 0x4c, 0x88, 0xb5, 0xf6, 0x18,
	0xcd, 0xd8, 0xd9, 0x72, 0x65, 0x39, 0x61, 0x12, 0x59, 0x05, 0x83, 0xb0, 0xb3, 0x15, 0x6f, 0xd2,
	0x77, 0xe8, 0x8b, 0x54, 0xbd, 0xea, 0x23, 0x54, 0xe9, 0x8b, 0x54, 0x33, 0xe6, 0xe0, 0xb0, 0xd9,
	0xbd, 0x82, 0xf9, 0xfd, 0xff, 0xf3, 0x9d, 0xec, 0xcf, 0xd0, 0x4c, 0x6f, 0xa7, 0x33, 0x19, 0x27,
	0x77, 0xd3, 0xb3, 0xd9, 0x7c, 0x9a, 0x4d, 0x71, 0x59, 0xff, 0x9c, 0xfe, 0x59, 0x85, 0x9a, 0x50,
	0x92, 0x9d, 0xdc, 0x4d, 0xb1, 0x09, 0x55, 0x3b, 0xbd, 0x8e, 0xc6, 0xf1, 0xc8, 0x34, 0x3a, 0x46,
	0x77, 0x8f, 0xaf, 0x8e, 0xf8, 0x6b, 0xd8, 0x7d, 0x1f, 0x27, 0x23, 0x73, 0xa7, 0x63, 0x74, 0x1b,
	0xe7, 0x28, 0x0f, 0x72, 0xa6, 0x6f, 0x2a, 0xce, 0xb5, 0x8a, 0x4f, 0x61, 0x9f, 0xcb, 0x74, 0x3a,
	0xfe, 0x28, 0x47, 0xfe, 0x62, 0x26, 0xcd, 0x52, 0xc7, 0xe8, 0xd6, 0xf8, 0x13, 0x96, 0x7b, 0xb2,
	0x87, 0x79, 0xb2, 0xf4, 0xec, 0xae, 0x3c, 0x1b, 0x86, 0xdf, 0x42, 0x83, 0xa4, 0x69, 0x7c, 0x9f,
	0x44, 0x37, 0x63, 0xa9, 0x5d, 0x65, 0xed, 0xda, 0xa2, 0xb8, 0x0d, 0x20, 0xb2, 0x28, 0x8b, 0x6f,
	0xb5, 0xa7, 0xa2, 0x3d, 0x05, 0x82, 0x7f, 0x80, 0x63, 0x3b, 0xf5, 0xe5, 0x7c, 0x12, 0x27, 0x51,
	0x16, 0x27, 0xf7, 0x4a, 0x92, 0x13, 0x99, 0x64, 0x66, 0x55, 0xb7, 0xf7, 0x19, 0x15, 0xff, 0x0c,
	0x0d, 0x16, 0x4d, 0xe4, 0x88, 0xcb, 0x3b, 0x39, 0x97, 0xc9, 0xad, 0x34, 0xf7, 0x3a, 0x46, 0xb7,
	0x7e, 0x7e, 0x54, 0xec, 0x7b, 0x2d, 0xf2, 0x2d, 0x33, 0xb6, 0xa0, 0x65, 0x45, 0xe3, 0xb1, 0x1c,
	0x79, 0xb3, 0x4d, 0x84, 0xda, 0x97, 0x22, 0x7c, 0xea, 0xc7, 0x5d, 0x68, 0xda, 0xa9, 0x90, 0x59,
	0x36, 0x56, 0xa5, 0x29, 0xbb, 0x09, 0xba, 0xe8, 0x6d, 0x8c, 0xcf, 0xe1, 0xd0, 0x4e, 0x49, 0x32,
	0x4d, 0x16, 0x93, 0xe9, 0x43, 0xba, 0xc9, 0x58, 0xd7, 0xf6, 0x67, 0x35, 0xfc, 0x0d, 0x54, 0x9c,
	0xe8, 0x46, 0x8e, 0x53, 0x73, 0xbf, 0x53, 0xea, 0x36, 0xce, 0x5b, 0xc5, 0xba, 0xb4, 0xc2, 0x97,
	0x06, 0xdc, 0x81, 0x7a, 0x5f, 0x26, 0x72, 0xbe, 0x9c, 0xf2, 0x4b, 0x3d, 0xe5, 0x22, 0x52, 0xfd,
	0xfa, 0xd1, 0xfc, 0x5e, 0x66, 0xc5, 0x89, 0x35, 0xbe, 0xd8, 0xef, 0x27, 0x7e, 0x4c, 0x01, 0xe7,
	0x4f, 0xae, 0x27, 0x67, 0x32, 0x19, 0xc9, 0xe4, 0x36, 0x96, 0xa9, 0xd9, 0xec, 0x94, 0x3e, 0x1f,
	0xe5, 0x99, 0x0b, 0xf8, 0x3b, 0x38, 0xe8, 0x2d, 0x92, 0x68, 0xb2, 0x15, 0x07, 0x75, 0x4a, 0xdd,
	0x1a, 0x7f, 0x4e, 0xc2, 0xc7, 0x50, 0x21, 0xbf, 0x47, 0x71, 0x96, 0x9a, 0x2d, 0x3d, 0xb0, 0xe5,
	0x09, 0xff, 0x02, 0x40, 0xb2, 0x6c, 0x1e, 0xdf, 0x3c, 0x64, 0x32, 0x35, 0xb1, 0x2e, 0xa4, 0x53,
	0x2c, 0x44, 0xad, 0xcc, 0xd9, 0xc6, 0x42, 0x93, 0x6c, 0xbe, 0xe0, 0x85, 0x3b, 0xaf, 0x3d, 0x68,
	0x6e, 0xc9, 0x18, 0x41, 0xe9, 0x37, 0xb9, 0xd0, 0xdb, 0x55, 0xe3, 0xea, 0x2f, 0x7e, 0x0b, 0xe5,
	0x8f, 0xd1, 0xf8, 0x41, 0xea, 0xd5, 0xaa, 0x3f, 0x5d, 0x2d, 0x95, 0x81, 0xe7, 0xf2, 0x4f, 0x3b,
	0x3f, 0x1a, 0xa7, 0xd7, 0xd0, 0x78, 0x3a, 0x02, 0xb5, 0x29, 0xeb, 0xc3, 0x88, 0x4d, 0x47, 0x72,
	0x19, 0x7a, 0x8b, 0xe2, 0x37, 0x50, 0xb3, 0x53, 0xc1, 0xfb, 0xda, 0xb2, 0xa3, 0xfb, 0xdc, 0x80,
	0x77, 0xdf, 0x2e, 0x3f, 0x02, 0x7a, 0x89, 0x6b, 0x50, 0xbe, 0x26, 0x4e, 0x40, 0xd1, 0x0b, 0x5c,
	0x87, 0x6a, 0x9f, 0x32, 0xca, 0x6d, 0x0b, 0x19, 0x18, 0xa0, 0x22, 0x7c, 0xe2, 0xdb, 0x16, 0xda,
	0x79, 0xf7, 0xf7, 0x2e, 0xc0, 0xe6, 0x55, 0x51, 0x52, 0xc0, 0x02, 0x41, 0x7b, 0xe8, 0x05, 0x6e,
	0x42, 0x5d, 0xf8, 0x9c, 0x12, 0x37, 0x74, 0x3c, 0x6f, 0x80, 0x0c, 0x7c, 0x00, 0xcd, 0x1c, 0x90,
	0x0b, 0x87, 0xe6, 0x70, 0x07, 0x9f, 0xc0, 0x81, 0x8e, 0x4c, 0x7c, 0x8f, 0x87, 0x2a, 0x2c, 0x75,
	0x29, 0xf3, 0x51, 0x09, 0x23, 0xd8, 0x17, 0xae, 0x13, 0x5e, 0x06, 0xcc, 0xf2, 0x6d, 0x8f, 0xa1,
	0x5d, 0x7d, 0xdf, 0x75, 0x42, 0xcb, 0x63, 0xc2, 0xe7, 0x81, 0xe5, 0x7b, 0x1c, 0x95, 0xf1, 0x21,
	0x20, 0x05, 0x85, 0xcd, 0xfa, 0x0e, 0x0d, 0xad, 0x2b, 0xdb, 0xe9, 0xa1, 0xca, 0x9a, 0xe6, 0xf9,
	0x73, 0x5a, 0x5d, 0x05, 0x60, 0x5e, 0x4e, 0x38, 0x65, 0x68, 0x6f, 0x95, 0x67, 0x4d, 0x6a, 0xf8,
	0x08, 0x5a, 0x8a, 0x0c, 0xb8, 0x37, 0x10, 0xa1, 0x4b, 0x06, 0x03, 0x9b, 0xf5, 0xd1, 0xcb, 0xd5,
	0xed, 0x1c, 0x5b, 0x0e, 0x11, 0x02, 0x35, 0x56, 0x89, 0x72, 0x98, 0x97, 0x85, 0x9a, 0xf8, 0x2b,
	0x38, 0x61, 0x9e, 0x6b, 0x33, 0xe2, 0x38, 0xc3, 0x50, 0x5c, 0x79, 0xdc, 0xb7, 0x02, 0x3f, 0xa4,
	0xbf, 0x0e, 0x38, 0x02, 0xfc, 0x1a, 0x8e, 0x73, 0x63, 0xc0, 0x89, 0x13, 0x06, 0x83, 0x1e, 0xf1,
	0x69, 0xae, 0xd5, 0xf1, 0x1b, 0x30, 0x0b, 0xda, 0xaa, 0xf7, 0x5c, 0x3d, 0x56, 0x13, 0xbd, 0xe0,
	0xde, 0x7b, 0xca, 0xc2, 0x4b, 0xc7, 0xfb, 0x80, 0xf6, 0xd5, 0xb8, 0xc9, 0x07, 0x62, 0xfb, 0x02,
	0x21, 0x95, 0xd3, 0x22, 0x8e, 0x23, 0x42, 0xc2, 0x3c, 0x36, 0x74, 0xbd, 0x40, 0x15, 0xe9, 0x89,
	0x80, 0x53, 0xd4, 0x2a, 0x94, 0xe9, 0xda, 0x6a, 0x54, 0x21, 0xf3, 0x10, 0x56, 0xb3, 0x7f, 0x4a,
	0x5d, 0x32, 0xbc, 0xa0, 0xe8, 0xa0, 0x30, 0x81, 0xa5, 0x30, 0xa4, 0x02, 0x1d, 0xe2, 0x57, 0x70,
	0x44, 0xfa, 0x94, 0xf9, 0xc5, 0x47, 0x10, 0x72, 0x7a, 0x89, 0x8e, 0x94, 0xb4, 0x9e, 0x62, 0x38,
	0xb4, 0xa9, 0xd3, 0x0b, 0xf3, 0x77, 0xe7, 0x04, 0x9b, 0x70, 0xb8, 0x2d, 0x5d, 0x72, 0xcf, 0x45,
	0x26, 0x6e, 0x00, 0x5c, 0x11, 0x11, 0x72, 0xea, 0x07, 0x9c, 0xa1, 0x57, 0x17, 0xe8, 0xaf, 0xc7,
	0xb6, 0xf1, 0xcf, 0x63, 0xdb, 0xf8, 0xf7, 0xb1, 0x6d, 0xfc, 0xf1, 0x5f, 0xfb, 0xc5, 0x4d, 0x45,
	0xef, 0xc0, 0xf7, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0xfc, 0x46, 0x78, 0xff, 0xb6, 0x06, 0x00,
	0x00,
}
