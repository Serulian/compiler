// Code generated by protoc-gen-gogo.
// source: scopeinfo.proto
// DO NOT EDIT!

/*
	Package proto is a generated protocol buffer package.

	It is generated from these files:
		scopeinfo.proto

	It has these top-level messages:
		ScopeInfo
		ScopeReference
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto1.ProtoPackageIsVersion1

type ScopeKind int32

const (
	ScopeKind_VALUE   ScopeKind = 0
	ScopeKind_GENERIC ScopeKind = 1
	ScopeKind_STATIC  ScopeKind = 2
)

var ScopeKind_name = map[int32]string{
	0: "VALUE",
	1: "GENERIC",
	2: "STATIC",
}
var ScopeKind_value = map[string]int32{
	"VALUE":   0,
	"GENERIC": 1,
	"STATIC":  2,
}

func (x ScopeKind) Enum() *ScopeKind {
	p := new(ScopeKind)
	*p = x
	return p
}
func (x ScopeKind) String() string {
	return proto1.EnumName(ScopeKind_name, int32(x))
}
func (x *ScopeKind) UnmarshalJSON(data []byte) error {
	value, err := proto1.UnmarshalJSONEnum(ScopeKind_value, data, "ScopeKind")
	if err != nil {
		return err
	}
	*x = ScopeKind(value)
	return nil
}
func (ScopeKind) EnumDescriptor() ([]byte, []int) { return fileDescriptorScopeinfo, []int{0} }

type ScopeLabel int32

const (
	ScopeLabel_STREAM_LOOP             ScopeLabel = 1
	ScopeLabel_STREAMABLE_LOOP         ScopeLabel = 2
	ScopeLabel_GENERATOR_STATEMENT     ScopeLabel = 3
	ScopeLabel_SML_FUNCTION            ScopeLabel = 4
	ScopeLabel_SML_CONSTRUCTOR         ScopeLabel = 5
	ScopeLabel_SML_SINGLE_CHILD        ScopeLabel = 6
	ScopeLabel_SML_STREAM_CHILD        ScopeLabel = 7
	ScopeLabel_SML_NO_CHILDREN         ScopeLabel = 8
	ScopeLabel_SML_CHILDREN            ScopeLabel = 9
	ScopeLabel_NOMINALLY_SHORTCUT_EXPR ScopeLabel = 10
	ScopeLabel_STRUCTURAL_UPDATE_EXPR  ScopeLabel = 11
	ScopeLabel_BROKEN_FLOW             ScopeLabel = 12
)

var ScopeLabel_name = map[int32]string{
	1:  "STREAM_LOOP",
	2:  "STREAMABLE_LOOP",
	3:  "GENERATOR_STATEMENT",
	4:  "SML_FUNCTION",
	5:  "SML_CONSTRUCTOR",
	6:  "SML_SINGLE_CHILD",
	7:  "SML_STREAM_CHILD",
	8:  "SML_NO_CHILDREN",
	9:  "SML_CHILDREN",
	10: "NOMINALLY_SHORTCUT_EXPR",
	11: "STRUCTURAL_UPDATE_EXPR",
	12: "BROKEN_FLOW",
}
var ScopeLabel_value = map[string]int32{
	"STREAM_LOOP":             1,
	"STREAMABLE_LOOP":         2,
	"GENERATOR_STATEMENT":     3,
	"SML_FUNCTION":            4,
	"SML_CONSTRUCTOR":         5,
	"SML_SINGLE_CHILD":        6,
	"SML_STREAM_CHILD":        7,
	"SML_NO_CHILDREN":         8,
	"SML_CHILDREN":            9,
	"NOMINALLY_SHORTCUT_EXPR": 10,
	"STRUCTURAL_UPDATE_EXPR":  11,
	"BROKEN_FLOW":             12,
}

func (x ScopeLabel) Enum() *ScopeLabel {
	p := new(ScopeLabel)
	*p = x
	return p
}
func (x ScopeLabel) String() string {
	return proto1.EnumName(ScopeLabel_name, int32(x))
}
func (x *ScopeLabel) UnmarshalJSON(data []byte) error {
	value, err := proto1.UnmarshalJSONEnum(ScopeLabel_value, data, "ScopeLabel")
	if err != nil {
		return err
	}
	*x = ScopeLabel(value)
	return nil
}
func (ScopeLabel) EnumDescriptor() ([]byte, []int) { return fileDescriptorScopeinfo, []int{1} }

type ScopeInfo struct {
	IsValid                *bool           `protobuf:"varint,1,opt,name=IsValid" json:"IsValid,omitempty"`
	Kind                   *ScopeKind      `protobuf:"varint,2,opt,name=Kind,enum=proto.ScopeKind,def=0" json:"Kind,omitempty"`
	NamedReference         *ScopeReference `protobuf:"bytes,8,opt,name=NamedReference" json:"NamedReference,omitempty"`
	CalledOpReference      *ScopeReference `protobuf:"bytes,9,opt,name=CalledOpReference" json:"CalledOpReference,omitempty"`
	ResolvedType           *string         `protobuf:"bytes,3,opt,name=ResolvedType" json:"ResolvedType,omitempty"`
	ReturnedType           *string         `protobuf:"bytes,4,opt,name=ReturnedType" json:"ReturnedType,omitempty"`
	AssignableType         *string         `protobuf:"bytes,5,opt,name=AssignableType" json:"AssignableType,omitempty"`
	StaticType             *string         `protobuf:"bytes,6,opt,name=StaticType" json:"StaticType,omitempty"`
	IsTerminatingStatement *bool           `protobuf:"varint,7,opt,name=IsTerminatingStatement" json:"IsTerminatingStatement,omitempty"`
	IsSettlingScope        *bool           `protobuf:"varint,10,opt,name=IsSettlingScope" json:"IsSettlingScope,omitempty"`
	IsAnonymousReference   *bool           `protobuf:"varint,11,opt,name=IsAnonymousReference" json:"IsAnonymousReference,omitempty"`
	Labels                 []ScopeLabel    `protobuf:"varint,12,rep,name=Labels,enum=proto.ScopeLabel" json:"Labels,omitempty"`
	XXX_unrecognized       []byte          `json:"-"`
}

func (m *ScopeInfo) Reset()                    { *m = ScopeInfo{} }
func (m *ScopeInfo) String() string            { return proto1.CompactTextString(m) }
func (*ScopeInfo) ProtoMessage()               {}
func (*ScopeInfo) Descriptor() ([]byte, []int) { return fileDescriptorScopeinfo, []int{0} }

const Default_ScopeInfo_Kind ScopeKind = ScopeKind_VALUE

func (m *ScopeInfo) GetIsValid() bool {
	if m != nil && m.IsValid != nil {
		return *m.IsValid
	}
	return false
}

func (m *ScopeInfo) GetKind() ScopeKind {
	if m != nil && m.Kind != nil {
		return *m.Kind
	}
	return Default_ScopeInfo_Kind
}

func (m *ScopeInfo) GetNamedReference() *ScopeReference {
	if m != nil {
		return m.NamedReference
	}
	return nil
}

func (m *ScopeInfo) GetCalledOpReference() *ScopeReference {
	if m != nil {
		return m.CalledOpReference
	}
	return nil
}

func (m *ScopeInfo) GetResolvedType() string {
	if m != nil && m.ResolvedType != nil {
		return *m.ResolvedType
	}
	return ""
}

func (m *ScopeInfo) GetReturnedType() string {
	if m != nil && m.ReturnedType != nil {
		return *m.ReturnedType
	}
	return ""
}

func (m *ScopeInfo) GetAssignableType() string {
	if m != nil && m.AssignableType != nil {
		return *m.AssignableType
	}
	return ""
}

func (m *ScopeInfo) GetStaticType() string {
	if m != nil && m.StaticType != nil {
		return *m.StaticType
	}
	return ""
}

func (m *ScopeInfo) GetIsTerminatingStatement() bool {
	if m != nil && m.IsTerminatingStatement != nil {
		return *m.IsTerminatingStatement
	}
	return false
}

func (m *ScopeInfo) GetIsSettlingScope() bool {
	if m != nil && m.IsSettlingScope != nil {
		return *m.IsSettlingScope
	}
	return false
}

func (m *ScopeInfo) GetIsAnonymousReference() bool {
	if m != nil && m.IsAnonymousReference != nil {
		return *m.IsAnonymousReference
	}
	return false
}

func (m *ScopeInfo) GetLabels() []ScopeLabel {
	if m != nil {
		return m.Labels
	}
	return nil
}

type ScopeReference struct {
	ReferencedNode   *string `protobuf:"bytes,1,opt,name=ReferencedNode" json:"ReferencedNode,omitempty"`
	IsSRGNode        *bool   `protobuf:"varint,2,opt,name=IsSRGNode" json:"IsSRGNode,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ScopeReference) Reset()                    { *m = ScopeReference{} }
func (m *ScopeReference) String() string            { return proto1.CompactTextString(m) }
func (*ScopeReference) ProtoMessage()               {}
func (*ScopeReference) Descriptor() ([]byte, []int) { return fileDescriptorScopeinfo, []int{1} }

func (m *ScopeReference) GetReferencedNode() string {
	if m != nil && m.ReferencedNode != nil {
		return *m.ReferencedNode
	}
	return ""
}

func (m *ScopeReference) GetIsSRGNode() bool {
	if m != nil && m.IsSRGNode != nil {
		return *m.IsSRGNode
	}
	return false
}

func init() {
	proto1.RegisterType((*ScopeInfo)(nil), "proto.ScopeInfo")
	proto1.RegisterType((*ScopeReference)(nil), "proto.ScopeReference")
	proto1.RegisterEnum("proto.ScopeKind", ScopeKind_name, ScopeKind_value)
	proto1.RegisterEnum("proto.ScopeLabel", ScopeLabel_name, ScopeLabel_value)
}
func (m *ScopeInfo) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ScopeInfo) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsValid != nil {
		data[i] = 0x8
		i++
		if *m.IsValid {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.Kind != nil {
		data[i] = 0x10
		i++
		i = encodeVarintScopeinfo(data, i, uint64(*m.Kind))
	}
	if m.ResolvedType != nil {
		data[i] = 0x1a
		i++
		i = encodeVarintScopeinfo(data, i, uint64(len(*m.ResolvedType)))
		i += copy(data[i:], *m.ResolvedType)
	}
	if m.ReturnedType != nil {
		data[i] = 0x22
		i++
		i = encodeVarintScopeinfo(data, i, uint64(len(*m.ReturnedType)))
		i += copy(data[i:], *m.ReturnedType)
	}
	if m.AssignableType != nil {
		data[i] = 0x2a
		i++
		i = encodeVarintScopeinfo(data, i, uint64(len(*m.AssignableType)))
		i += copy(data[i:], *m.AssignableType)
	}
	if m.StaticType != nil {
		data[i] = 0x32
		i++
		i = encodeVarintScopeinfo(data, i, uint64(len(*m.StaticType)))
		i += copy(data[i:], *m.StaticType)
	}
	if m.IsTerminatingStatement != nil {
		data[i] = 0x38
		i++
		if *m.IsTerminatingStatement {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.NamedReference != nil {
		data[i] = 0x42
		i++
		i = encodeVarintScopeinfo(data, i, uint64(m.NamedReference.Size()))
		n1, err := m.NamedReference.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.CalledOpReference != nil {
		data[i] = 0x4a
		i++
		i = encodeVarintScopeinfo(data, i, uint64(m.CalledOpReference.Size()))
		n2, err := m.CalledOpReference.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.IsSettlingScope != nil {
		data[i] = 0x50
		i++
		if *m.IsSettlingScope {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.IsAnonymousReference != nil {
		data[i] = 0x58
		i++
		if *m.IsAnonymousReference {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if len(m.Labels) > 0 {
		for _, num := range m.Labels {
			data[i] = 0x60
			i++
			i = encodeVarintScopeinfo(data, i, uint64(num))
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ScopeReference) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ScopeReference) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ReferencedNode != nil {
		data[i] = 0xa
		i++
		i = encodeVarintScopeinfo(data, i, uint64(len(*m.ReferencedNode)))
		i += copy(data[i:], *m.ReferencedNode)
	}
	if m.IsSRGNode != nil {
		data[i] = 0x10
		i++
		if *m.IsSRGNode {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(data[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeFixed64Scopeinfo(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Scopeinfo(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintScopeinfo(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *ScopeInfo) Size() (n int) {
	var l int
	_ = l
	if m.IsValid != nil {
		n += 2
	}
	if m.Kind != nil {
		n += 1 + sovScopeinfo(uint64(*m.Kind))
	}
	if m.ResolvedType != nil {
		l = len(*m.ResolvedType)
		n += 1 + l + sovScopeinfo(uint64(l))
	}
	if m.ReturnedType != nil {
		l = len(*m.ReturnedType)
		n += 1 + l + sovScopeinfo(uint64(l))
	}
	if m.AssignableType != nil {
		l = len(*m.AssignableType)
		n += 1 + l + sovScopeinfo(uint64(l))
	}
	if m.StaticType != nil {
		l = len(*m.StaticType)
		n += 1 + l + sovScopeinfo(uint64(l))
	}
	if m.IsTerminatingStatement != nil {
		n += 2
	}
	if m.NamedReference != nil {
		l = m.NamedReference.Size()
		n += 1 + l + sovScopeinfo(uint64(l))
	}
	if m.CalledOpReference != nil {
		l = m.CalledOpReference.Size()
		n += 1 + l + sovScopeinfo(uint64(l))
	}
	if m.IsSettlingScope != nil {
		n += 2
	}
	if m.IsAnonymousReference != nil {
		n += 2
	}
	if len(m.Labels) > 0 {
		for _, e := range m.Labels {
			n += 1 + sovScopeinfo(uint64(e))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ScopeReference) Size() (n int) {
	var l int
	_ = l
	if m.ReferencedNode != nil {
		l = len(*m.ReferencedNode)
		n += 1 + l + sovScopeinfo(uint64(l))
	}
	if m.IsSRGNode != nil {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovScopeinfo(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozScopeinfo(x uint64) (n int) {
	return sovScopeinfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ScopeInfo) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScopeinfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScopeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScopeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsValid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScopeinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsValid = &b
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			var v ScopeKind
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScopeinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (ScopeKind(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Kind = &v
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolvedType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScopeinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScopeinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.ResolvedType = &s
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnedType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScopeinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScopeinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.ReturnedType = &s
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssignableType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScopeinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScopeinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.AssignableType = &s
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaticType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScopeinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScopeinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.StaticType = &s
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTerminatingStatement", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScopeinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsTerminatingStatement = &b
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamedReference", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScopeinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScopeinfo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NamedReference == nil {
				m.NamedReference = &ScopeReference{}
			}
			if err := m.NamedReference.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CalledOpReference", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScopeinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScopeinfo
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CalledOpReference == nil {
				m.CalledOpReference = &ScopeReference{}
			}
			if err := m.CalledOpReference.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSettlingScope", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScopeinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsSettlingScope = &b
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAnonymousReference", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScopeinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsAnonymousReference = &b
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var v ScopeLabel
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScopeinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (ScopeLabel(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Labels = append(m.Labels, v)
		default:
			iNdEx = preIndex
			skippy, err := skipScopeinfo(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScopeinfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ScopeReference) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScopeinfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ScopeReference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ScopeReference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferencedNode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScopeinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthScopeinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(data[iNdEx:postIndex])
			m.ReferencedNode = &s
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSRGNode", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScopeinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			b := bool(v != 0)
			m.IsSRGNode = &b
		default:
			iNdEx = preIndex
			skippy, err := skipScopeinfo(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScopeinfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, data[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipScopeinfo(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowScopeinfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowScopeinfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowScopeinfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthScopeinfo
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowScopeinfo
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipScopeinfo(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthScopeinfo = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowScopeinfo   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorScopeinfo = []byte{
	// 532 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x91, 0xcf, 0x6e, 0xd3, 0x4c,
	0x14, 0xc5, 0x9b, 0xff, 0xf1, 0x4d, 0x94, 0x4c, 0xa6, 0xfd, 0x52, 0xeb, 0x03, 0x45, 0xa5, 0x12,
	0x12, 0xaa, 0x44, 0x41, 0x5d, 0xc2, 0xca, 0x71, 0xdd, 0xd4, 0xaa, 0x33, 0x13, 0x8d, 0xed, 0x02,
	0x2b, 0xcb, 0x8d, 0xa7, 0x95, 0x25, 0xc7, 0x8e, 0x62, 0x17, 0xa9, 0x4f, 0xc1, 0x96, 0x47, 0x62,
	0xc9, 0x23, 0x20, 0x78, 0x07, 0xd6, 0x5c, 0x8f, 0xdb, 0xb4, 0x62, 0xc1, 0xc2, 0x4a, 0xe6, 0x77,
	0xe6, 0xde, 0x73, 0xe7, 0x1e, 0x18, 0xe6, 0xcb, 0x6c, 0x2d, 0xe3, 0xf4, 0x3a, 0x3b, 0x5e, 0x6f,
	0xb2, 0x22, 0xa3, 0x2d, 0xf5, 0x73, 0xf8, 0xbb, 0x0e, 0x9a, 0x5b, 0x4a, 0x36, 0x4a, 0x74, 0x08,
	0x1d, 0x3b, 0xbf, 0x0c, 0x93, 0x38, 0xd2, 0x6b, 0x07, 0xb5, 0x57, 0x5d, 0xfa, 0x12, 0x9a, 0x17,
	0x71, 0x1a, 0xe9, 0x75, 0x3c, 0x0d, 0x4e, 0x48, 0x55, 0x7b, 0xac, 0x0a, 0x4a, 0xfe, 0xae, 0x75,
	0x69, 0x38, 0xbe, 0x45, 0xf7, 0xa0, 0x2f, 0x64, 0x9e, 0x25, 0x9f, 0x65, 0xe4, 0xdd, 0xad, 0xa5,
	0xde, 0xc0, 0xeb, 0x5a, 0x45, 0x8b, 0xdb, 0x4d, 0x7a, 0x4f, 0x9b, 0x8a, 0x8e, 0x61, 0x60, 0xe4,
	0x79, 0x7c, 0x93, 0x86, 0x57, 0x89, 0x54, 0xbc, 0xa5, 0x38, 0x05, 0x70, 0x8b, 0xb0, 0x88, 0x97,
	0x8a, 0xb5, 0x15, 0x9b, 0xc0, 0xd8, 0xce, 0x3d, 0xb9, 0x59, 0xc5, 0x29, 0x2a, 0xe9, 0x4d, 0x79,
	0x41, 0xae, 0x64, 0x5a, 0xe8, 0x1d, 0x35, 0xde, 0x6b, 0x18, 0xb0, 0x70, 0x25, 0x23, 0x21, 0xaf,
	0xe5, 0x46, 0xa6, 0x4b, 0xa9, 0x77, 0x91, 0xf7, 0x4e, 0xfe, 0x7b, 0x3a, 0xe8, 0x56, 0xa4, 0x6f,
	0x61, 0x64, 0x86, 0x49, 0x22, 0x23, 0xbe, 0x7e, 0xac, 0xd0, 0xfe, 0x55, 0xb1, 0x0f, 0x43, 0x3b,
	0x77, 0x65, 0x51, 0x24, 0xa5, 0x7b, 0xa9, 0xe9, 0xa0, 0x9c, 0x9f, 0xc3, 0x9e, 0x9d, 0x1b, 0x69,
	0x96, 0xde, 0xad, 0xb2, 0xdb, 0xfc, 0xb1, 0x5b, 0x4f, 0xa9, 0x2f, 0xa0, 0xed, 0x84, 0x57, 0x32,
	0xc9, 0xf5, 0xfe, 0x41, 0x03, 0x17, 0x37, 0x7a, 0xda, 0x5d, 0x29, 0x87, 0xef, 0x61, 0xf0, 0x97,
	0x17, 0x2e, 0x66, 0x7b, 0x88, 0x58, 0x16, 0x49, 0x95, 0x81, 0x46, 0x47, 0xa0, 0xe1, 0x0c, 0x62,
	0xa6, 0x50, 0x19, 0x44, 0xf7, 0xe8, 0xcd, 0x7d, 0x68, 0x65, 0x06, 0x54, 0x83, 0x2a, 0x05, 0xb2,
	0x43, 0x7b, 0xd0, 0x99, 0x59, 0xcc, 0x12, 0xb6, 0x49, 0x6a, 0xb8, 0xcf, 0xb6, 0xeb, 0x19, 0x1e,
	0xfe, 0xaf, 0x1f, 0x7d, 0xa9, 0xe3, 0x76, 0xb7, 0xe6, 0x98, 0x73, 0xcf, 0xf5, 0x84, 0x65, 0xcc,
	0x03, 0x87, 0xf3, 0x05, 0xde, 0xdd, 0x85, 0x61, 0x05, 0x8c, 0xa9, 0x63, 0x55, 0xb0, 0x8e, 0x8f,
	0xdf, 0x55, 0xdd, 0x0c, 0x8f, 0x8b, 0xa0, 0x6c, 0x65, 0xcd, 0x2d, 0xe6, 0x91, 0x06, 0x25, 0xd0,
	0x77, 0xe7, 0x4e, 0x70, 0xe6, 0x33, 0xd3, 0xb3, 0x39, 0x23, 0x4d, 0x55, 0x8f, 0xc4, 0xe4, 0x0c,
	0xdb, 0xf8, 0x26, 0x16, 0x90, 0x16, 0xe6, 0x4f, 0x4a, 0xe8, 0xda, 0x6c, 0x86, 0x4d, 0xcd, 0x73,
	0xdb, 0x39, 0x25, 0xed, 0x2d, 0xad, 0xfc, 0x2b, 0xda, 0x79, 0x68, 0xc0, 0x78, 0x45, 0x84, 0xc5,
	0x48, 0xf7, 0xc1, 0x67, 0x4b, 0x34, 0xfa, 0x0c, 0xf6, 0x19, 0x9f, 0xdb, 0xcc, 0x70, 0x9c, 0x4f,
	0x81, 0x7b, 0xce, 0x85, 0x67, 0xfa, 0x5e, 0x60, 0x7d, 0x5c, 0x08, 0x02, 0xf4, 0x7f, 0x18, 0x57,
	0xee, 0xbe, 0x30, 0x9c, 0xc0, 0x5f, 0x9c, 0xe2, 0xc4, 0x95, 0xd6, 0x2b, 0x5f, 0x3c, 0x15, 0xfc,
	0xc2, 0x62, 0xc1, 0x99, 0xc3, 0x3f, 0x90, 0xfe, 0x94, 0x7c, 0xfb, 0x39, 0xa9, 0x7d, 0xc7, 0xef,
	0x07, 0x7e, 0x5f, 0x7f, 0x4d, 0x76, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0x68, 0xd3, 0xa7, 0xae,
	0x23, 0x03, 0x00, 0x00,
}
