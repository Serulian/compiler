// Copyright 2015 The Serulian Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

syntax = "proto3";

package proto;

enum ScopeKind {
    VALUE = 0;
    GENERIC = 1;
    STATIC = 2;
}

enum ScopeLabel {
	UNUSED = 0;

	STREAM_LOOP = 1; // Marks the loop as iterating over a stream.
	STREAMABLE_LOOP = 2; // Marks the loop as iterating over a streamable object.
	GENERATOR_STATEMENT = 3; // Marks a statement as being part of a generator.

	SML_FUNCTION = 4; // Marks a SML declaration as calling a function.
	SML_CONSTRUCTOR = 5; // Marks a SML declaration as calling a constructor.

	SML_SINGLE_CHILD = 6; // Marks a SML declaration as having a single value as a child.
	SML_STREAM_CHILD = 7; // Marks a SML declaration as having a single stream as a child.
	SML_NO_CHILDREN = 8; // Mark a SML declaration as having no children.
	SML_CHILDREN = 9; // Mark a SML declaration as having a set of children.

	SML_PROPS_MAPPING = 13;
	SML_PROPS_CLASS = 14;
	SML_PROPS_STRUCT = 15;

	NOMINALLY_SHORTCUT_EXPR = 10; // Marks an expression of a nominal type being used
					 		      // where its root data is expected. This is a special
							      // allowance as a shortcut for easier working with native APIs.

	STRUCTURAL_UPDATE_EXPR = 11; // Marks a structural new expression as updating an existing struct.
	STRUCTURAL_FUNCTION_EXPR = 22; // Marks a structural new expression as calling a function.

	BROKEN_FLOW = 12; // Marks a block as having a break somewhere that breaks a parent loop or switch.

	AWAITS = 16; // Marks a body as awaiting on a promise.
	CALLS_ANONYMOUS_CLOSURE = 17; // Marks a body as calling an anonymous closure.

	// Marks member nodes with whether their implementation is promising, as computed by the scope
	// system.
	SML_PROMISING_NO = 18;
	SML_PROMISING_MAYBE = 19;
	SML_PROMISING_YES = 20;

	// Marks an expression as referencing the constructor of an agent.
	AGENT_CONSTRUCTOR_REF = 21;
}

message ScopeInfo {
	bool IsValid = 1;        // Whether this scope is valid.
	ScopeKind Kind = 2;

	ScopeReference NamedReference = 8;
	ScopeReference CalledOpReference = 9;
	ScopeReference TargetedReference = 14;

	string ResolvedType = 3;   // The type of the scope, if any.
	string ReturnedType = 4;   // The returned type, if any.
	string AssignableType = 5; // The assignable type of the scope, if any.
	string StaticType = 6; 	// The static type of the scope, if any.
	string GenericType = 13;    // The generic type of the scope, if any.

	bool IsTerminatingStatement = 7; // If true, the statement terminates execution in the block.
	bool IsSettlingScope = 10; // If true, the scope settles the function in some way.
	bool IsAnonymousReference = 11; // If true, reference points to an anonymous value (i.e. _).

	repeated ScopeLabel Labels = 12;

	repeated ScopeReference StaticDependencies = 15;
	repeated string DynamicDependencies = 16;
	bool Awaits = 17; // If true, the scoped member awaits on a promise.

	map<string, ScopeInfo> Attributes = 18; // The scope of the attributes. Applies to SML expressions.
}

message ScopeReference {
	string ReferencedNode = 1; // The ID of the node that this scope references by name.
	bool IsSRGNode = 2; // If true, references an SRG node. Otherwise, a typegraph node.
}