NodeTypeFile
  end-rune = 59
  input-source = multiple binary expr test
  start-rune = 0
  child-node =>
    NodeTypeFunction
      end-rune = 59
      input-source = multiple binary expr test
      named = SomeFunction
      start-rune = 0
      definition-body =>
        NodeTypeStatementBlock
          end-rune = 59
          input-source = multiple binary expr test
          start-rune = 30
          block-child =>
            NodeBinaryAddExpression
              end-rune = 57
              input-source = multiple binary expr test
              start-rune = 43
              binary-expression-left =>
                NodeBinaryAddExpression
                  end-rune = 45
                  input-source = multiple binary expr test
                  start-rune = 33
                  binary-expression-left =>
                    NodeBinarySubtractExpression
                      end-rune = 41
                      input-source = multiple binary expr test
                      start-rune = 33
                      binary-expression-left =>
                        NodeBinaryDivideExpression
                          end-rune = 37
                          input-source = multiple binary expr test
                          start-rune = 33
                          binary-expression-left =>
                            NodeTypeIdentifierExpression
                              end-rune = 33
                              identexpr-name = a
                              input-source = multiple binary expr test
                              start-rune = 33
                          binary-expression-right =>
                            NodeTypeIdentifierExpression
                              end-rune = 37
                              identexpr-name = b
                              input-source = multiple binary expr test
                              start-rune = 37
                      binary-expression-right =>
                        NodeTypeIdentifierExpression
                          end-rune = 41
                          identexpr-name = c
                          input-source = multiple binary expr test
                          start-rune = 41
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 45
                      identexpr-name = d
                      input-source = multiple binary expr test
                      start-rune = 45
              binary-expression-right =>
                NodeBinaryModuloExpression
                  end-rune = 57
                  input-source = multiple binary expr test
                  start-rune = 49
                  binary-expression-left =>
                    NodeBinaryMultiplyExpression
                      end-rune = 53
                      input-source = multiple binary expr test
                      start-rune = 49
                      binary-expression-left =>
                        NodeTypeIdentifierExpression
                          end-rune = 49
                          identexpr-name = e
                          input-source = multiple binary expr test
                          start-rune = 49
                      binary-expression-right =>
                        NodeTypeIdentifierExpression
                          end-rune = 53
                          identexpr-name = f
                          input-source = multiple binary expr test
                          start-rune = 53
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 57
                      identexpr-name = g
                      input-source = multiple binary expr test
                      start-rune = 57
      typemember-return-type =>
        NodeTypeVoid
          end-rune = 12
          input-source = multiple binary expr test
          start-rune = 9