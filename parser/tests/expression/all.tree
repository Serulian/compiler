NodeTypeFile
  end-rune = 531
  input-source = all expr test
  start-rune = 0
  child-node =>
    NodeTypeFunction
      end-rune = 531
      input-source = all expr test
      named = SomeFunction
      start-rune = 0
      definition-body =>
        NodeTypeStatementBlock
          end-rune = 531
          input-source = all expr test
          start-rune = 30
          block-child =>
            NodeTypeExpressionStatement
              end-rune = 37
              input-source = all expr test
              start-rune = 33
              expr-statement-expr =>
                NodeTypeAwaitExpression
                  end-rune = 36
                  input-source = all expr test
                  start-rune = 36
                  await-expression-source =>
                    NodeTypeIdentifierExpression
                      end-rune = 36
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 36
            NodeTypeExpressionStatement
              end-rune = 44
              input-source = all expr test
              start-rune = 39
              expr-statement-expr =>
                NodeBinaryAddExpression
                  end-rune = 43
                  input-source = all expr test
                  start-rune = 39
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 39
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 39
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 43
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 43
            NodeTypeExpressionStatement
              end-rune = 51
              input-source = all expr test
              start-rune = 46
              expr-statement-expr =>
                NodeBinarySubtractExpression
                  end-rune = 50
                  input-source = all expr test
                  start-rune = 46
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 46
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 46
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 50
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 50
            NodeTypeExpressionStatement
              end-rune = 58
              input-source = all expr test
              start-rune = 53
              expr-statement-expr =>
                NodeBinaryMultiplyExpression
                  end-rune = 57
                  input-source = all expr test
                  start-rune = 53
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 53
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 53
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 57
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 57
            NodeTypeExpressionStatement
              end-rune = 65
              input-source = all expr test
              start-rune = 60
              expr-statement-expr =>
                NodeBinaryDivideExpression
                  end-rune = 64
                  input-source = all expr test
                  start-rune = 60
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 60
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 60
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 64
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 64
            NodeTypeExpressionStatement
              end-rune = 72
              input-source = all expr test
              start-rune = 67
              expr-statement-expr =>
                NodeBinaryModuloExpression
                  end-rune = 71
                  input-source = all expr test
                  start-rune = 67
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 67
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 67
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 71
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 71
            NodeTypeExpressionStatement
              end-rune = 79
              input-source = all expr test
              start-rune = 74
              expr-statement-expr =>
                NodeBitwiseOrExpression
                  end-rune = 78
                  input-source = all expr test
                  start-rune = 74
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 74
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 74
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 78
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 78
            NodeTypeExpressionStatement
              end-rune = 86
              input-source = all expr test
              start-rune = 81
              expr-statement-expr =>
                NodeBitwiseAndExpression
                  end-rune = 85
                  input-source = all expr test
                  start-rune = 81
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 81
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 81
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 85
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 85
            NodeTypeExpressionStatement
              end-rune = 93
              input-source = all expr test
              start-rune = 88
              expr-statement-expr =>
                NodeBitwiseXorExpression
                  end-rune = 92
                  input-source = all expr test
                  start-rune = 88
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 88
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 88
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 92
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 92
            NodeTypeExpressionStatement
              end-rune = 101
              input-source = all expr test
              start-rune = 95
              expr-statement-expr =>
                NodeBitwiseShiftLeftExpression
                  end-rune = 100
                  input-source = all expr test
                  start-rune = 95
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 95
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 95
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 100
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 100
            NodeTypeExpressionStatement
              end-rune = 109
              input-source = all expr test
              start-rune = 103
              expr-statement-expr =>
                NodeBooleanAndExpression
                  end-rune = 108
                  input-source = all expr test
                  start-rune = 103
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 103
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 103
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 108
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 108
            NodeTypeExpressionStatement
              end-rune = 117
              input-source = all expr test
              start-rune = 111
              expr-statement-expr =>
                NodeBooleanOrExpression
                  end-rune = 116
                  input-source = all expr test
                  start-rune = 111
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 111
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 111
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 116
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 116
            NodeTypeExpressionStatement
              end-rune = 125
              input-source = all expr test
              start-rune = 119
              expr-statement-expr =>
                NodeComparisonEqualsExpression
                  end-rune = 124
                  input-source = all expr test
                  start-rune = 119
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 119
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 119
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 124
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 124
            NodeTypeExpressionStatement
              end-rune = 133
              input-source = all expr test
              start-rune = 127
              expr-statement-expr =>
                NodeComparisonNotEqualsExpression
                  end-rune = 132
                  input-source = all expr test
                  start-rune = 127
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 127
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 127
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 132
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 132
            NodeTypeExpressionStatement
              end-rune = 141
              input-source = all expr test
              start-rune = 135
              expr-statement-expr =>
                NodeComparisonLTEExpression
                  end-rune = 140
                  input-source = all expr test
                  start-rune = 135
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 135
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 135
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 140
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 140
            NodeTypeExpressionStatement
              end-rune = 149
              input-source = all expr test
              start-rune = 143
              expr-statement-expr =>
                NodeComparisonGTEExpression
                  end-rune = 148
                  input-source = all expr test
                  start-rune = 143
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 143
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 143
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 148
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 148
            NodeTypeExpressionStatement
              end-rune = 156
              input-source = all expr test
              start-rune = 151
              expr-statement-expr =>
                NodeComparisonLTExpression
                  end-rune = 155
                  input-source = all expr test
                  start-rune = 151
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 151
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 151
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 155
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 155
            NodeTypeExpressionStatement
              end-rune = 163
              input-source = all expr test
              start-rune = 158
              expr-statement-expr =>
                NodeComparisonGTExpression
                  end-rune = 162
                  input-source = all expr test
                  start-rune = 158
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 158
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 158
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 162
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 162
            NodeTypeExpressionStatement
              end-rune = 171
              input-source = all expr test
              start-rune = 165
              expr-statement-expr =>
                NodeNullComparisonExpression
                  end-rune = 170
                  input-source = all expr test
                  start-rune = 165
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 165
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 165
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 170
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 170
            NodeTypeExpressionStatement
              end-rune = 179
              input-source = all expr test
              start-rune = 173
              expr-statement-expr =>
                NodeDefineRangeExpression
                  end-rune = 178
                  input-source = all expr test
                  start-rune = 173
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 173
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 173
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 178
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 178
            NodeTypeExpressionStatement
              end-rune = 184
              input-source = all expr test
              start-rune = 181
              expr-statement-expr =>
                NodeMemberAccessExpression
                  end-rune = 183
                  input-source = all expr test
                  member-access-identifier = b
                  start-rune = 181
                  member-access-expr =>
                    NodeTypeIdentifierExpression
                      end-rune = 181
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 181
            NodeTypeExpressionStatement
              end-rune = 190
              input-source = all expr test
              start-rune = 186
              expr-statement-expr =>
                NodeDynamicMemberAccessExpression
                  end-rune = 189
                  input-source = all expr test
                  member-access-identifier = b
                  start-rune = 186
                  member-access-expr =>
                    NodeTypeIdentifierExpression
                      end-rune = 186
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 186
            NodeTypeExpressionStatement
              end-rune = 196
              input-source = all expr test
              start-rune = 192
              expr-statement-expr =>
                NodeNullableMemberAccessExpression
                  end-rune = 195
                  input-source = all expr test
                  member-access-identifier = b
                  start-rune = 192
                  member-access-expr =>
                    NodeTypeIdentifierExpression
                      end-rune = 192
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 192
            NodeTypeExpressionStatement
              end-rune = 202
              input-source = all expr test
              start-rune = 198
              expr-statement-expr =>
                NodeStreamMemberAccessExpression
                  end-rune = 201
                  input-source = all expr test
                  member-access-identifier = b
                  start-rune = 198
                  member-access-expr =>
                    NodeTypeIdentifierExpression
                      end-rune = 198
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 198
            NodeTypeExpressionStatement
              end-rune = 209
              input-source = all expr test
              start-rune = 204
              expr-statement-expr =>
                NodeCastExpression
                  end-rune = 208
                  input-source = all expr test
                  start-rune = 204
                  cast-expr-expr =>
                    NodeTypeIdentifierExpression
                      end-rune = 204
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 204
                  cast-expr-type =>
                    NodeTypeTypeReference
                      end-rune = 207
                      input-source = all expr test
                      start-rune = 207
                      typereference-path =>
                        NodeTypeIdentifierPath
                          end-rune = 207
                          input-source = all expr test
                          start-rune = 207
                          identifierpath-root =>
                            NodeTypeIdentifierAccess
                              end-rune = 207
                              identifieraccess-name = b
                              input-source = all expr test
                              start-rune = 207
            NodeTypeExpressionStatement
              end-rune = 221
              input-source = all expr test
              start-rune = 211
              expr-statement-expr =>
                NodeFunctionCallExpression
                  end-rune = 220
                  input-source = all expr test
                  start-rune = 211
                  function-call-argument =>
                    NodeTypeIdentifierExpression
                      end-rune = 213
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 213
                    NodeTypeIdentifierExpression
                      end-rune = 216
                      identexpr-name = c
                      input-source = all expr test
                      start-rune = 216
                    NodeTypeIdentifierExpression
                      end-rune = 219
                      identexpr-name = d
                      input-source = all expr test
                      start-rune = 219
                  function-call-expr =>
                    NodeTypeIdentifierExpression
                      end-rune = 211
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 211
            NodeTypeExpressionStatement
              end-rune = 227
              input-source = all expr test
              start-rune = 223
              expr-statement-expr =>
                NodeSliceExpression
                  end-rune = 226
                  input-source = all expr test
                  start-rune = 223
                  slice-expr-expr =>
                    NodeTypeIdentifierExpression
                      end-rune = 223
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 223
                  slice-expr-index =>
                    NodeTypeIdentifierExpression
                      end-rune = 225
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 225
            NodeTypeExpressionStatement
              end-rune = 234
              input-source = all expr test
              start-rune = 229
              expr-statement-expr =>
                NodeSliceExpression
                  end-rune = 233
                  input-source = all expr test
                  start-rune = 229
                  slice-expr-expr =>
                    NodeTypeIdentifierExpression
                      end-rune = 229
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 229
                  slice-expr-left-index =>
                    NodeTypeIdentifierExpression
                      end-rune = 231
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 231
            NodeTypeExpressionStatement
              end-rune = 241
              input-source = all expr test
              start-rune = 236
              expr-statement-expr =>
                NodeSliceExpression
                  end-rune = 240
                  input-source = all expr test
                  start-rune = 236
                  slice-expr-expr =>
                    NodeTypeIdentifierExpression
                      end-rune = 236
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 236
                  slice-expr-right-index =>
                    NodeTypeIdentifierExpression
                      end-rune = 239
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 239
            NodeTypeExpressionStatement
              end-rune = 249
              input-source = all expr test
              start-rune = 243
              expr-statement-expr =>
                NodeSliceExpression
                  end-rune = 248
                  input-source = all expr test
                  start-rune = 243
                  slice-expr-expr =>
                    NodeTypeIdentifierExpression
                      end-rune = 243
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 243
                  slice-expr-left-index =>
                    NodeTypeIdentifierExpression
                      end-rune = 245
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 245
                  slice-expr-right-index =>
                    NodeTypeIdentifierExpression
                      end-rune = 247
                      identexpr-name = c
                      input-source = all expr test
                      start-rune = 247
            NodeTypeExpressionStatement
              end-rune = 253
              input-source = all expr test
              start-rune = 251
              expr-statement-expr =>
                NodeBooleanNotExpression
                  end-rune = 252
                  input-source = all expr test
                  start-rune = 252
                  unary-expression-child =>
                    NodeTypeIdentifierExpression
                      end-rune = 252
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 252
            NodeTypeExpressionStatement
              end-rune = 257
              input-source = all expr test
              start-rune = 255
              expr-statement-expr =>
                NodeRootTypeExpression
                  end-rune = 256
                  input-source = all expr test
                  start-rune = 256
                  unary-expression-child =>
                    NodeTypeIdentifierExpression
                      end-rune = 256
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 256
            NodeTypeExpressionStatement
              end-rune = 266
              input-source = all expr test
              start-rune = 259
              expr-statement-expr =>
                NodeBinaryAddExpression
                  end-rune = 264
                  input-source = all expr test
                  start-rune = 260
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 260
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 260
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 264
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 264
            NodeTypeExpressionStatement
              end-rune = 272
              input-source = all expr test
              start-rune = 268
              expr-statement-expr =>
                NodeNumericLiteralExpression
                  end-rune = 271
                  input-source = all expr test
                  literal-value = 1234
                  start-rune = 268
            NodeTypeExpressionStatement
              end-rune = 279
              input-source = all expr test
              start-rune = 274
              expr-statement-expr =>
                NodeNumericLiteralExpression
                  end-rune = 278
                  input-source = all expr test
                  literal-value = 1.245
                  start-rune = 274
            NodeTypeExpressionStatement
              end-rune = 285
              input-source = all expr test
              start-rune = 281
              expr-statement-expr =>
                NodeBooleanLiteralExpression
                  end-rune = 284
                  input-source = all expr test
                  literal-value = true
                  start-rune = 281
            NodeTypeExpressionStatement
              end-rune = 292
              input-source = all expr test
              start-rune = 287
              expr-statement-expr =>
                NodeBooleanLiteralExpression
                  end-rune = 291
                  input-source = all expr test
                  literal-value = false
                  start-rune = 287
            NodeTypeExpressionStatement
              end-rune = 307
              input-source = all expr test
              start-rune = 294
              expr-statement-expr =>
                NodeStringLiteralExpression
                  end-rune = 306
                  input-source = all expr test
                  literal-value = 'hello world'
                  start-rune = 294
            NodeTypeExpressionStatement
              end-rune = 322
              input-source = all expr test
              start-rune = 309
              expr-statement-expr =>
                NodeStringLiteralExpression
                  end-rune = 321
                  input-source = all expr test
                  literal-value = "hello world"
                  start-rune = 309
            NodeTypeExpressionStatement
              end-rune = 338
              input-source = all expr test
              start-rune = 324
              expr-statement-expr =>
                NodeTypeTemplateString
                  end-rune = 337
                  input-source = all expr test
                  start-rune = 324
                  template-string-piece =>
                    NodeStringLiteralExpression
                      literal-value = `hello
	world`
            NodeTypeExpressionStatement
              end-rune = 342
              input-source = all expr test
              start-rune = 340
              expr-statement-expr =>
                NodeListExpression
                  end-rune = 341
                  input-source = all expr test
                  start-rune = 340
            NodeTypeExpressionStatement
              end-rune = 347
              input-source = all expr test
              start-rune = 344
              expr-statement-expr =>
                NodeListExpression
                  end-rune = 346
                  input-source = all expr test
                  start-rune = 344
                  list-expr-value =>
                    NodeNumericLiteralExpression
                      end-rune = 345
                      input-source = all expr test
                      literal-value = 1
                      start-rune = 345
            NodeTypeExpressionStatement
              end-rune = 358
              input-source = all expr test
              start-rune = 349
              expr-statement-expr =>
                NodeListExpression
                  end-rune = 357
                  input-source = all expr test
                  start-rune = 349
                  list-expr-value =>
                    NodeNumericLiteralExpression
                      end-rune = 350
                      input-source = all expr test
                      literal-value = 1
                      start-rune = 350
                    NodeNumericLiteralExpression
                      end-rune = 353
                      input-source = all expr test
                      literal-value = 2
                      start-rune = 353
                    NodeNumericLiteralExpression
                      end-rune = 356
                      input-source = all expr test
                      literal-value = 3
                      start-rune = 356
            NodeTypeExpressionStatement
              end-rune = 369
              input-source = all expr test
              start-rune = 360
              expr-statement-expr =>
                NodeBitwiseNotExpression
                  end-rune = 368
                  input-source = all expr test
                  start-rune = 361
                  unary-expression-child =>
                    NodeTypeIdentifierExpression
                      end-rune = 368
                      identexpr-name = someName
                      input-source = all expr test
                      start-rune = 361
            NodeTypeExpressionStatement
              end-rune = 380
              input-source = all expr test
              start-rune = 371
              expr-statement-expr =>
                NodeBooleanNotExpression
                  end-rune = 379
                  input-source = all expr test
                  start-rune = 372
                  unary-expression-child =>
                    NodeTypeIdentifierExpression
                      end-rune = 379
                      identexpr-name = someName
                      input-source = all expr test
                      start-rune = 372
            NodeTypeExpressionStatement
              end-rune = 432
              input-source = all expr test
              start-rune = 382
              expr-statement-expr =>
                NodeTypeLambdaExpression
                  end-rune = 431
                  input-source = all expr test
                  start-rune = 382
                  lambda-expression-block =>
                    NodeTypeStatementBlock
                      end-rune = 431
                      input-source = all expr test
                      start-rune = 416
                      block-child =>
                        NodeTypeReturnStatement
                          end-rune = 429
                          input-source = all expr test
                          start-rune = 418
                          return-expr =>
                            NodeTypeIdentifierExpression
                              end-rune = 429
                              identexpr-name = first
                              input-source = all expr test
                              start-rune = 425
                  lambda-expression-parameter =>
                    NodeTypeParameter
                      end-rune = 400
                      input-source = all expr test
                      named = first
                      start-rune = 392
                      parameter-type =>
                        NodeTypeTypeReference
                          end-rune = 400
                          input-source = all expr test
                          start-rune = 398
                          typereference-path =>
                            NodeTypeIdentifierPath
                              end-rune = 400
                              input-source = all expr test
                              start-rune = 398
                              identifierpath-root =>
                                NodeTypeIdentifierAccess
                                  end-rune = 400
                                  identifieraccess-name = int
                                  input-source = all expr test
                                  start-rune = 398
                    NodeTypeParameter
                      end-rune = 413
                      input-source = all expr test
                      named = second
                      start-rune = 403
                      parameter-type =>
                        NodeTypeTypeReference
                          end-rune = 413
                          input-source = all expr test
                          start-rune = 410
                          typereference-path =>
                            NodeTypeIdentifierPath
                              end-rune = 413
                              input-source = all expr test
                              start-rune = 410
                              identifierpath-root =>
                                NodeTypeIdentifierAccess
                                  end-rune = 413
                                  identifieraccess-name = bool
                                  input-source = all expr test
                                  start-rune = 410
            NodeTypeExpressionStatement
              end-rune = 448
              input-source = all expr test
              start-rune = 434
              expr-statement-expr =>
                NodeTypeLambdaExpression
                  end-rune = 447
                  input-source = all expr test
                  start-rune = 434
                  lambda-expression-child-expr =>
                    NodeTypeIdentifierExpression
                      end-rune = 447
                      identexpr-name = someExpr
                      input-source = all expr test
                      start-rune = 440
            NodeTypeExpressionStatement
              end-rune = 452
              input-source = all expr test
              start-rune = 450
              expr-statement-expr =>
                NodeMapExpression
                  end-rune = 451
                  input-source = all expr test
                  start-rune = 450
            NodeTypeExpressionStatement
              end-rune = 468
              input-source = all expr test
              start-rune = 454
              expr-statement-expr =>
                NodeMapExpression
                  end-rune = 467
                  input-source = all expr test
                  start-rune = 454
                  map-expr-entry =>
                    NodeMapExpressionEntry
                      end-rune = 463
                      input-source = all expr test
                      start-rune = 458
                      map-entry-key =>
                        NodeStringLiteralExpression
                          end-rune = 460
                          input-source = all expr test
                          literal-value = 'a'
                          start-rune = 458
                      map-entry-value =>
                        NodeNumericLiteralExpression
                          end-rune = 463
                          input-source = all expr test
                          literal-value = 2
                          start-rune = 463
            NodeTypeExpressionStatement
              end-rune = 482
              input-source = all expr test
              start-rune = 470
              expr-statement-expr =>
                NodeMapExpression
                  end-rune = 481
                  input-source = all expr test
                  start-rune = 470
                  map-expr-entry =>
                    NodeMapExpressionEntry
                      end-rune = 477
                      input-source = all expr test
                      start-rune = 474
                      map-entry-key =>
                        NodeTypeIdentifierExpression
                          end-rune = 474
                          identexpr-name = a
                          input-source = all expr test
                          start-rune = 474
                      map-entry-value =>
                        NodeNumericLiteralExpression
                          end-rune = 477
                          input-source = all expr test
                          literal-value = 2
                          start-rune = 477
            NodeTypeExpressionStatement
              end-rune = 488
              input-source = all expr test
              start-rune = 484
              expr-statement-expr =>
                NodeNullLiteralExpression
                  end-rune = 487
                  input-source = all expr test
                  start-rune = 484
            NodeTypeExpressionStatement
              end-rune = 494
              input-source = all expr test
              start-rune = 490
              expr-statement-expr =>
                NodeThisLiteralExpression
                  end-rune = 493
                  input-source = all expr test
                  start-rune = 490
            NodeTypeExpressionStatement
              end-rune = 500
              input-source = all expr test
              start-rune = 496
              expr-statement-expr =>
                NodeGenericSpecifierExpression
                  end-rune = 499
                  input-source = all expr test
                  start-rune = 496
                  generic-specifier-expr =>
                    NodeTypeIdentifierExpression
                      end-rune = 496
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 496
                  generic-specifier-type =>
                    NodeTypeTypeReference
                      end-rune = 498
                      input-source = all expr test
                      start-rune = 498
                      typereference-path =>
                        NodeTypeIdentifierPath
                          end-rune = 498
                          input-source = all expr test
                          start-rune = 498
                          identifierpath-root =>
                            NodeTypeIdentifierAccess
                              end-rune = 498
                              identifieraccess-name = b
                              input-source = all expr test
                              start-rune = 498
            NodeTypeExpressionStatement
              end-rune = 510
              input-source = all expr test
              start-rune = 502
              expr-statement-expr =>
                NodeGenericSpecifierExpression
                  end-rune = 509
                  input-source = all expr test
                  start-rune = 502
                  generic-specifier-expr =>
                    NodeTypeIdentifierExpression
                      end-rune = 502
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 502
                  generic-specifier-type =>
                    NodeTypeNullable
                      end-rune = 508
                      input-source = all expr test
                      start-rune = 504
                      typereference-inner-type =>
                        NodeTypeTypeReference
                          end-rune = 507
                          input-source = all expr test
                          start-rune = 504
                          typereference-generic =>
                            NodeTypeTypeReference
                              end-rune = 506
                              input-source = all expr test
                              start-rune = 506
                              typereference-path =>
                                NodeTypeIdentifierPath
                                  end-rune = 506
                                  input-source = all expr test
                                  start-rune = 506
                                  identifierpath-root =>
                                    NodeTypeIdentifierAccess
                                      end-rune = 506
                                      identifieraccess-name = c
                                      input-source = all expr test
                                      start-rune = 506
                          typereference-path =>
                            NodeTypeIdentifierPath
                              end-rune = 504
                              input-source = all expr test
                              start-rune = 504
                              identifierpath-root =>
                                NodeTypeIdentifierAccess
                                  end-rune = 504
                                  identifieraccess-name = b
                                  input-source = all expr test
                                  start-rune = 504
            NodeTypeExpressionStatement
              end-rune = 518
              input-source = all expr test
              start-rune = 512
              expr-statement-expr =>
                NodeInCollectionExpression
                  end-rune = 517
                  input-source = all expr test
                  start-rune = 512
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 512
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 512
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 517
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 517
            NodeTypeExpressionStatement
              end-rune = 530
              input-source = all expr test
              start-rune = 520
              expr-statement-expr =>
                NodeInCollectionExpression
                  end-rune = 529
                  input-source = all expr test
                  start-rune = 520
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 520
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 520
                  binary-expression-right =>
                    NodeMemberAccessExpression
                      end-rune = 529
                      input-source = all expr test
                      member-access-identifier = foo
                      start-rune = 525
                      member-access-expr =>
                        NodeTypeIdentifierExpression
                          end-rune = 525
                          identexpr-name = b
                          input-source = all expr test
                          start-rune = 525
      typemember-return-type =>
        NodeTypeVoid
          end-rune = 12
          input-source = all expr test
          start-rune = 9