NodeTypeFile
  end-rune = 839
  input-source = all expr test
  start-rune = 0
  child-node =>
    NodeTypeFunction
      end-rune = 839
      input-source = all expr test
      named = SomeFunction
      start-rune = 0
      definition-body =>
        NodeTypeStatementBlock
          end-rune = 839
          input-source = all expr test
          start-rune = 30
          block-child =>
            NodeTypeExpressionStatement
              end-rune = 37
              input-source = all expr test
              start-rune = 33
              expr-statement-expr =>
                NodeTypeAwaitExpression
                  end-rune = 36
                  input-source = all expr test
                  start-rune = 36
                  await-expression-source =>
                    NodeTypeIdentifierExpression
                      end-rune = 36
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 36
            NodeTypeExpressionStatement
              end-rune = 44
              input-source = all expr test
              start-rune = 39
              expr-statement-expr =>
                NodeBinaryAddExpression
                  end-rune = 43
                  input-source = all expr test
                  start-rune = 39
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 39
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 39
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 43
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 43
            NodeTypeExpressionStatement
              end-rune = 51
              input-source = all expr test
              start-rune = 46
              expr-statement-expr =>
                NodeBinarySubtractExpression
                  end-rune = 50
                  input-source = all expr test
                  start-rune = 46
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 46
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 46
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 50
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 50
            NodeTypeExpressionStatement
              end-rune = 58
              input-source = all expr test
              start-rune = 53
              expr-statement-expr =>
                NodeBinaryMultiplyExpression
                  end-rune = 57
                  input-source = all expr test
                  start-rune = 53
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 53
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 53
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 57
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 57
            NodeTypeExpressionStatement
              end-rune = 65
              input-source = all expr test
              start-rune = 60
              expr-statement-expr =>
                NodeBinaryDivideExpression
                  end-rune = 64
                  input-source = all expr test
                  start-rune = 60
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 60
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 60
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 64
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 64
            NodeTypeExpressionStatement
              end-rune = 72
              input-source = all expr test
              start-rune = 67
              expr-statement-expr =>
                NodeBinaryModuloExpression
                  end-rune = 71
                  input-source = all expr test
                  start-rune = 67
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 67
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 67
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 71
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 71
            NodeTypeExpressionStatement
              end-rune = 79
              input-source = all expr test
              start-rune = 74
              expr-statement-expr =>
                NodeBitwiseOrExpression
                  end-rune = 78
                  input-source = all expr test
                  start-rune = 74
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 74
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 74
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 78
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 78
            NodeTypeExpressionStatement
              end-rune = 86
              input-source = all expr test
              start-rune = 81
              expr-statement-expr =>
                NodeBitwiseAndExpression
                  end-rune = 85
                  input-source = all expr test
                  start-rune = 81
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 81
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 81
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 85
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 85
            NodeTypeExpressionStatement
              end-rune = 93
              input-source = all expr test
              start-rune = 88
              expr-statement-expr =>
                NodeBitwiseXorExpression
                  end-rune = 92
                  input-source = all expr test
                  start-rune = 88
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 88
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 88
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 92
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 92
            NodeTypeExpressionStatement
              end-rune = 101
              input-source = all expr test
              start-rune = 95
              expr-statement-expr =>
                NodeBitwiseShiftLeftExpression
                  end-rune = 100
                  input-source = all expr test
                  start-rune = 95
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 95
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 95
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 100
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 100
            NodeTypeExpressionStatement
              end-rune = 109
              input-source = all expr test
              start-rune = 103
              expr-statement-expr =>
                NodeBooleanAndExpression
                  end-rune = 108
                  input-source = all expr test
                  start-rune = 103
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 103
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 103
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 108
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 108
            NodeTypeExpressionStatement
              end-rune = 117
              input-source = all expr test
              start-rune = 111
              expr-statement-expr =>
                NodeBooleanOrExpression
                  end-rune = 116
                  input-source = all expr test
                  start-rune = 111
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 111
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 111
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 116
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 116
            NodeTypeExpressionStatement
              end-rune = 125
              input-source = all expr test
              start-rune = 119
              expr-statement-expr =>
                NodeComparisonEqualsExpression
                  end-rune = 124
                  input-source = all expr test
                  start-rune = 119
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 119
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 119
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 124
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 124
            NodeTypeExpressionStatement
              end-rune = 133
              input-source = all expr test
              start-rune = 127
              expr-statement-expr =>
                NodeComparisonNotEqualsExpression
                  end-rune = 132
                  input-source = all expr test
                  start-rune = 127
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 127
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 127
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 132
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 132
            NodeTypeExpressionStatement
              end-rune = 141
              input-source = all expr test
              start-rune = 135
              expr-statement-expr =>
                NodeComparisonLTEExpression
                  end-rune = 140
                  input-source = all expr test
                  start-rune = 135
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 135
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 135
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 140
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 140
            NodeTypeExpressionStatement
              end-rune = 149
              input-source = all expr test
              start-rune = 143
              expr-statement-expr =>
                NodeComparisonGTEExpression
                  end-rune = 148
                  input-source = all expr test
                  start-rune = 143
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 143
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 143
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 148
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 148
            NodeTypeExpressionStatement
              end-rune = 156
              input-source = all expr test
              start-rune = 151
              expr-statement-expr =>
                NodeComparisonLTExpression
                  end-rune = 155
                  input-source = all expr test
                  start-rune = 151
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 151
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 151
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 155
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 155
            NodeTypeExpressionStatement
              end-rune = 163
              input-source = all expr test
              start-rune = 158
              expr-statement-expr =>
                NodeComparisonGTExpression
                  end-rune = 162
                  input-source = all expr test
                  start-rune = 158
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 158
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 158
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 162
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 162
            NodeTypeExpressionStatement
              end-rune = 171
              input-source = all expr test
              start-rune = 165
              expr-statement-expr =>
                NodeNullComparisonExpression
                  end-rune = 170
                  input-source = all expr test
                  start-rune = 165
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 165
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 165
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 170
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 170
            NodeTypeExpressionStatement
              end-rune = 179
              input-source = all expr test
              start-rune = 173
              expr-statement-expr =>
                NodeDefineRangeExpression
                  end-rune = 178
                  input-source = all expr test
                  start-rune = 173
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 173
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 173
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 178
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 178
            NodeTypeExpressionStatement
              end-rune = 188
              input-source = all expr test
              start-rune = 181
              expr-statement-expr =>
                NodeDefineExclusiveRangeExpression
                  end-rune = 187
                  input-source = all expr test
                  start-rune = 181
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 181
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 181
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 187
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 187
            NodeTypeExpressionStatement
              end-rune = 193
              input-source = all expr test
              start-rune = 190
              expr-statement-expr =>
                NodeMemberAccessExpression
                  end-rune = 192
                  input-source = all expr test
                  member-access-identifier = b
                  start-rune = 190
                  member-access-expr =>
                    NodeTypeIdentifierExpression
                      end-rune = 190
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 190
            NodeTypeExpressionStatement
              end-rune = 199
              input-source = all expr test
              start-rune = 195
              expr-statement-expr =>
                NodeDynamicMemberAccessExpression
                  end-rune = 198
                  input-source = all expr test
                  member-access-identifier = b
                  start-rune = 195
                  member-access-expr =>
                    NodeTypeIdentifierExpression
                      end-rune = 195
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 195
            NodeTypeExpressionStatement
              end-rune = 205
              input-source = all expr test
              start-rune = 201
              expr-statement-expr =>
                NodeNullableMemberAccessExpression
                  end-rune = 204
                  input-source = all expr test
                  member-access-identifier = b
                  start-rune = 201
                  member-access-expr =>
                    NodeTypeIdentifierExpression
                      end-rune = 201
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 201
            NodeTypeExpressionStatement
              end-rune = 211
              input-source = all expr test
              start-rune = 207
              expr-statement-expr =>
                NodeStreamMemberAccessExpression
                  end-rune = 210
                  input-source = all expr test
                  member-access-identifier = b
                  start-rune = 207
                  member-access-expr =>
                    NodeTypeIdentifierExpression
                      end-rune = 207
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 207
            NodeTypeExpressionStatement
              end-rune = 218
              input-source = all expr test
              start-rune = 213
              expr-statement-expr =>
                NodeCastExpression
                  end-rune = 217
                  input-source = all expr test
                  start-rune = 213
                  cast-expr-expr =>
                    NodeTypeIdentifierExpression
                      end-rune = 213
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 213
                  cast-expr-type =>
                    NodeTypeTypeReference
                      end-rune = 216
                      input-source = all expr test
                      start-rune = 216
                      typereference-path =>
                        NodeTypeIdentifierPath
                          end-rune = 216
                          input-source = all expr test
                          start-rune = 216
                          identifierpath-root =>
                            NodeTypeIdentifierAccess
                              end-rune = 216
                              identifieraccess-name = b
                              input-source = all expr test
                              start-rune = 216
            NodeTypeExpressionStatement
              end-rune = 230
              input-source = all expr test
              start-rune = 220
              expr-statement-expr =>
                NodeFunctionCallExpression
                  end-rune = 229
                  input-source = all expr test
                  start-rune = 220
                  function-call-argument =>
                    NodeTypeIdentifierExpression
                      end-rune = 222
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 222
                    NodeTypeIdentifierExpression
                      end-rune = 225
                      identexpr-name = c
                      input-source = all expr test
                      start-rune = 225
                    NodeTypeIdentifierExpression
                      end-rune = 228
                      identexpr-name = d
                      input-source = all expr test
                      start-rune = 228
                  function-call-expr =>
                    NodeTypeIdentifierExpression
                      end-rune = 220
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 220
            NodeTypeExpressionStatement
              end-rune = 236
              input-source = all expr test
              start-rune = 232
              expr-statement-expr =>
                NodeSliceExpression
                  end-rune = 235
                  input-source = all expr test
                  start-rune = 232
                  slice-expr-expr =>
                    NodeTypeIdentifierExpression
                      end-rune = 232
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 232
                  slice-expr-index =>
                    NodeTypeIdentifierExpression
                      end-rune = 234
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 234
            NodeTypeExpressionStatement
              end-rune = 243
              input-source = all expr test
              start-rune = 238
              expr-statement-expr =>
                NodeSliceExpression
                  end-rune = 242
                  input-source = all expr test
                  start-rune = 238
                  slice-expr-expr =>
                    NodeTypeIdentifierExpression
                      end-rune = 238
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 238
                  slice-expr-left-index =>
                    NodeTypeIdentifierExpression
                      end-rune = 240
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 240
            NodeTypeExpressionStatement
              end-rune = 250
              input-source = all expr test
              start-rune = 245
              expr-statement-expr =>
                NodeSliceExpression
                  end-rune = 249
                  input-source = all expr test
                  start-rune = 245
                  slice-expr-expr =>
                    NodeTypeIdentifierExpression
                      end-rune = 245
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 245
                  slice-expr-right-index =>
                    NodeTypeIdentifierExpression
                      end-rune = 248
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 248
            NodeTypeExpressionStatement
              end-rune = 258
              input-source = all expr test
              start-rune = 252
              expr-statement-expr =>
                NodeSliceExpression
                  end-rune = 257
                  input-source = all expr test
                  start-rune = 252
                  slice-expr-expr =>
                    NodeTypeIdentifierExpression
                      end-rune = 252
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 252
                  slice-expr-left-index =>
                    NodeTypeIdentifierExpression
                      end-rune = 254
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 254
                  slice-expr-right-index =>
                    NodeTypeIdentifierExpression
                      end-rune = 256
                      identexpr-name = c
                      input-source = all expr test
                      start-rune = 256
            NodeTypeExpressionStatement
              end-rune = 262
              input-source = all expr test
              start-rune = 260
              expr-statement-expr =>
                NodeBooleanNotExpression
                  end-rune = 261
                  input-source = all expr test
                  start-rune = 261
                  unary-expression-child =>
                    NodeTypeIdentifierExpression
                      end-rune = 261
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 261
            NodeTypeExpressionStatement
              end-rune = 266
              input-source = all expr test
              start-rune = 264
              expr-statement-expr =>
                NodeRootTypeExpression
                  end-rune = 265
                  input-source = all expr test
                  start-rune = 265
                  unary-expression-child =>
                    NodeTypeIdentifierExpression
                      end-rune = 265
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 265
            NodeTypeExpressionStatement
              end-rune = 275
              input-source = all expr test
              start-rune = 268
              expr-statement-expr =>
                NodeBinaryAddExpression
                  end-rune = 273
                  input-source = all expr test
                  start-rune = 269
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 269
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 269
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 273
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 273
            NodeTypeExpressionStatement
              end-rune = 281
              input-source = all expr test
              start-rune = 277
              expr-statement-expr =>
                NodeNumericLiteralExpression
                  end-rune = 280
                  input-source = all expr test
                  literal-value = 1234
                  start-rune = 277
            NodeTypeExpressionStatement
              end-rune = 288
              input-source = all expr test
              start-rune = 283
              expr-statement-expr =>
                NodeNumericLiteralExpression
                  end-rune = 287
                  input-source = all expr test
                  literal-value = 1.245
                  start-rune = 283
            NodeTypeExpressionStatement
              end-rune = 293
              input-source = all expr test
              start-rune = 290
              expr-statement-expr =>
                NodeNumericLiteralExpression
                  end-rune = 292
                  input-source = all expr test
                  literal-value = 42f
                  start-rune = 290
            NodeTypeExpressionStatement
              end-rune = 300
              input-source = all expr test
              start-rune = 295
              expr-statement-expr =>
                NodeNumericLiteralExpression
                  end-rune = 299
                  input-source = all expr test
                  literal-value = 42.5f
                  start-rune = 295
            NodeTypeExpressionStatement
              end-rune = 306
              input-source = all expr test
              start-rune = 302
              expr-statement-expr =>
                NodeBooleanLiteralExpression
                  end-rune = 305
                  input-source = all expr test
                  literal-value = true
                  start-rune = 302
            NodeTypeExpressionStatement
              end-rune = 313
              input-source = all expr test
              start-rune = 308
              expr-statement-expr =>
                NodeBooleanLiteralExpression
                  end-rune = 312
                  input-source = all expr test
                  literal-value = false
                  start-rune = 308
            NodeTypeExpressionStatement
              end-rune = 328
              input-source = all expr test
              start-rune = 315
              expr-statement-expr =>
                NodeStringLiteralExpression
                  end-rune = 327
                  input-source = all expr test
                  literal-value = 'hello world'
                  start-rune = 315
            NodeTypeExpressionStatement
              end-rune = 343
              input-source = all expr test
              start-rune = 330
              expr-statement-expr =>
                NodeStringLiteralExpression
                  end-rune = 342
                  input-source = all expr test
                  literal-value = "hello world"
                  start-rune = 330
            NodeTypeExpressionStatement
              end-rune = 359
              input-source = all expr test
              start-rune = 345
              expr-statement-expr =>
                NodeTypeTemplateString
                  end-rune = 358
                  input-source = all expr test
                  start-rune = 345
                  template-string-piece =>
                    NodeStringLiteralExpression
                      literal-value = `hello
	world`
            NodeTypeExpressionStatement
              end-rune = 363
              input-source = all expr test
              start-rune = 361
              expr-statement-expr =>
                NodeListLiteralExpression
                  end-rune = 362
                  input-source = all expr test
                  start-rune = 361
            NodeTypeExpressionStatement
              end-rune = 368
              input-source = all expr test
              start-rune = 365
              expr-statement-expr =>
                NodeListLiteralExpression
                  end-rune = 367
                  input-source = all expr test
                  start-rune = 365
                  list-expr-value =>
                    NodeNumericLiteralExpression
                      end-rune = 366
                      input-source = all expr test
                      literal-value = 1
                      start-rune = 366
            NodeTypeExpressionStatement
              end-rune = 379
              input-source = all expr test
              start-rune = 370
              expr-statement-expr =>
                NodeListLiteralExpression
                  end-rune = 378
                  input-source = all expr test
                  start-rune = 370
                  list-expr-value =>
                    NodeNumericLiteralExpression
                      end-rune = 371
                      input-source = all expr test
                      literal-value = 1
                      start-rune = 371
                    NodeNumericLiteralExpression
                      end-rune = 374
                      input-source = all expr test
                      literal-value = 2
                      start-rune = 374
                    NodeNumericLiteralExpression
                      end-rune = 377
                      input-source = all expr test
                      literal-value = 3
                      start-rune = 377
            NodeTypeExpressionStatement
              end-rune = 390
              input-source = all expr test
              start-rune = 381
              expr-statement-expr =>
                NodeBitwiseNotExpression
                  end-rune = 389
                  input-source = all expr test
                  start-rune = 382
                  unary-expression-child =>
                    NodeTypeIdentifierExpression
                      end-rune = 389
                      identexpr-name = someName
                      input-source = all expr test
                      start-rune = 382
            NodeTypeExpressionStatement
              end-rune = 401
              input-source = all expr test
              start-rune = 392
              expr-statement-expr =>
                NodeBooleanNotExpression
                  end-rune = 400
                  input-source = all expr test
                  start-rune = 393
                  unary-expression-child =>
                    NodeTypeIdentifierExpression
                      end-rune = 400
                      identexpr-name = someName
                      input-source = all expr test
                      start-rune = 393
            NodeTypeExpressionStatement
              end-rune = 453
              input-source = all expr test
              start-rune = 403
              expr-statement-expr =>
                NodeTypeLambdaExpression
                  end-rune = 452
                  input-source = all expr test
                  start-rune = 403
                  lambda-expression-block =>
                    NodeTypeStatementBlock
                      end-rune = 452
                      input-source = all expr test
                      start-rune = 437
                      block-child =>
                        NodeTypeReturnStatement
                          end-rune = 450
                          input-source = all expr test
                          start-rune = 439
                          return-expr =>
                            NodeTypeIdentifierExpression
                              end-rune = 450
                              identexpr-name = first
                              input-source = all expr test
                              start-rune = 446
                  lambda-expression-parameter =>
                    NodeTypeParameter
                      end-rune = 421
                      input-source = all expr test
                      named = first
                      start-rune = 413
                      parameter-type =>
                        NodeTypeTypeReference
                          end-rune = 421
                          input-source = all expr test
                          start-rune = 419
                          typereference-path =>
                            NodeTypeIdentifierPath
                              end-rune = 421
                              input-source = all expr test
                              start-rune = 419
                              identifierpath-root =>
                                NodeTypeIdentifierAccess
                                  end-rune = 421
                                  identifieraccess-name = int
                                  input-source = all expr test
                                  start-rune = 419
                    NodeTypeParameter
                      end-rune = 434
                      input-source = all expr test
                      named = second
                      start-rune = 424
                      parameter-type =>
                        NodeTypeTypeReference
                          end-rune = 434
                          input-source = all expr test
                          start-rune = 431
                          typereference-path =>
                            NodeTypeIdentifierPath
                              end-rune = 434
                              input-source = all expr test
                              start-rune = 431
                              identifierpath-root =>
                                NodeTypeIdentifierAccess
                                  end-rune = 434
                                  identifieraccess-name = bool
                                  input-source = all expr test
                                  start-rune = 431
            NodeTypeExpressionStatement
              end-rune = 469
              input-source = all expr test
              start-rune = 455
              expr-statement-expr =>
                NodeTypeLambdaExpression
                  end-rune = 468
                  input-source = all expr test
                  start-rune = 455
                  lambda-expression-child-expr =>
                    NodeTypeIdentifierExpression
                      end-rune = 468
                      identexpr-name = someExpr
                      input-source = all expr test
                      start-rune = 461
            NodeTypeExpressionStatement
              end-rune = 473
              input-source = all expr test
              start-rune = 471
              expr-statement-expr =>
                NodeMapLiteralExpression
                  end-rune = 472
                  input-source = all expr test
                  start-rune = 471
            NodeTypeExpressionStatement
              end-rune = 489
              input-source = all expr test
              start-rune = 475
              expr-statement-expr =>
                NodeMapLiteralExpression
                  end-rune = 488
                  input-source = all expr test
                  start-rune = 475
                  map-expr-entry =>
                    NodeMapLiteralExpressionEntry
                      end-rune = 484
                      input-source = all expr test
                      start-rune = 479
                      map-entry-key =>
                        NodeStringLiteralExpression
                          end-rune = 481
                          input-source = all expr test
                          literal-value = 'a'
                          start-rune = 479
                      map-entry-value =>
                        NodeNumericLiteralExpression
                          end-rune = 484
                          input-source = all expr test
                          literal-value = 2
                          start-rune = 484
            NodeTypeExpressionStatement
              end-rune = 503
              input-source = all expr test
              start-rune = 491
              expr-statement-expr =>
                NodeMapLiteralExpression
                  end-rune = 502
                  input-source = all expr test
                  start-rune = 491
                  map-expr-entry =>
                    NodeMapLiteralExpressionEntry
                      end-rune = 498
                      input-source = all expr test
                      start-rune = 495
                      map-entry-key =>
                        NodeTypeIdentifierExpression
                          end-rune = 495
                          identexpr-name = a
                          input-source = all expr test
                          start-rune = 495
                      map-entry-value =>
                        NodeNumericLiteralExpression
                          end-rune = 498
                          input-source = all expr test
                          literal-value = 2
                          start-rune = 498
            NodeTypeExpressionStatement
              end-rune = 509
              input-source = all expr test
              start-rune = 505
              expr-statement-expr =>
                NodeNullLiteralExpression
                  end-rune = 508
                  input-source = all expr test
                  start-rune = 505
            NodeTypeExpressionStatement
              end-rune = 515
              input-source = all expr test
              start-rune = 511
              expr-statement-expr =>
                NodeThisLiteralExpression
                  end-rune = 514
                  input-source = all expr test
                  start-rune = 511
            NodeTypeExpressionStatement
              end-rune = 526
              input-source = all expr test
              start-rune = 517
              expr-statement-expr =>
                NodePrincipalLiteralExpression
                  end-rune = 525
                  input-source = all expr test
                  start-rune = 517
            NodeTypeExpressionStatement
              end-rune = 532
              input-source = all expr test
              start-rune = 528
              expr-statement-expr =>
                NodeGenericSpecifierExpression
                  end-rune = 531
                  input-source = all expr test
                  start-rune = 528
                  generic-specifier-expr =>
                    NodeTypeIdentifierExpression
                      end-rune = 528
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 528
                  generic-specifier-type =>
                    NodeTypeTypeReference
                      end-rune = 530
                      input-source = all expr test
                      start-rune = 530
                      typereference-path =>
                        NodeTypeIdentifierPath
                          end-rune = 530
                          input-source = all expr test
                          start-rune = 530
                          identifierpath-root =>
                            NodeTypeIdentifierAccess
                              end-rune = 530
                              identifieraccess-name = b
                              input-source = all expr test
                              start-rune = 530
            NodeTypeExpressionStatement
              end-rune = 542
              input-source = all expr test
              start-rune = 534
              expr-statement-expr =>
                NodeGenericSpecifierExpression
                  end-rune = 541
                  input-source = all expr test
                  start-rune = 534
                  generic-specifier-expr =>
                    NodeTypeIdentifierExpression
                      end-rune = 534
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 534
                  generic-specifier-type =>
                    NodeTypeNullable
                      end-rune = 540
                      input-source = all expr test
                      start-rune = 536
                      typereference-inner-type =>
                        NodeTypeTypeReference
                          end-rune = 539
                          input-source = all expr test
                          start-rune = 536
                          typereference-generic =>
                            NodeTypeTypeReference
                              end-rune = 538
                              input-source = all expr test
                              start-rune = 538
                              typereference-path =>
                                NodeTypeIdentifierPath
                                  end-rune = 538
                                  input-source = all expr test
                                  start-rune = 538
                                  identifierpath-root =>
                                    NodeTypeIdentifierAccess
                                      end-rune = 538
                                      identifieraccess-name = c
                                      input-source = all expr test
                                      start-rune = 538
                          typereference-path =>
                            NodeTypeIdentifierPath
                              end-rune = 536
                              input-source = all expr test
                              start-rune = 536
                              identifierpath-root =>
                                NodeTypeIdentifierAccess
                                  end-rune = 536
                                  identifieraccess-name = b
                                  input-source = all expr test
                                  start-rune = 536
            NodeTypeExpressionStatement
              end-rune = 550
              input-source = all expr test
              start-rune = 544
              expr-statement-expr =>
                NodeInCollectionExpression
                  end-rune = 549
                  input-source = all expr test
                  start-rune = 544
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 544
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 544
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 549
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 549
            NodeTypeExpressionStatement
              end-rune = 562
              input-source = all expr test
              start-rune = 552
              expr-statement-expr =>
                NodeInCollectionExpression
                  end-rune = 561
                  input-source = all expr test
                  start-rune = 552
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 552
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 552
                  binary-expression-right =>
                    NodeMemberAccessExpression
                      end-rune = 561
                      input-source = all expr test
                      member-access-identifier = foo
                      start-rune = 557
                      member-access-expr =>
                        NodeTypeIdentifierExpression
                          end-rune = 557
                          identexpr-name = b
                          input-source = all expr test
                          start-rune = 557
            NodeTypeExpressionStatement
              end-rune = 572
              input-source = all expr test
              start-rune = 564
              expr-statement-expr =>
                NodeIsComparisonExpression
                  end-rune = 571
                  input-source = all expr test
                  start-rune = 564
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 564
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 564
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 571
                      identexpr-name = foo
                      input-source = all expr test
                      start-rune = 569
            NodeTypeExpressionStatement
              end-rune = 586
              input-source = all expr test
              start-rune = 574
              expr-statement-expr =>
                NodeIsComparisonExpression
                  end-rune = 585
                  input-source = all expr test
                  start-rune = 574
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 574
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 574
                  binary-expression-right =>
                    NodeKeywordNotExpression
                      end-rune = 585
                      input-source = all expr test
                      start-rune = 583
                      unary-expression-child =>
                        NodeTypeIdentifierExpression
                          end-rune = 585
                          identexpr-name = foo
                          input-source = all expr test
                          start-rune = 583
            NodeTypeExpressionStatement
              end-rune = 601
              input-source = all expr test
              start-rune = 588
              expr-statement-expr =>
                NodeTypeConditionalExpression
                  end-rune = 601
                  input-source = all expr test
                  start-rune = 588
                  comparison-expr-check =>
                    NodeTypeIdentifierExpression
                      end-rune = 593
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 593
                  comparison-expr-else =>
                    NodeTypeIdentifierExpression
                      end-rune = 600
                      identexpr-name = c
                      input-source = all expr test
                      start-rune = 600
                  comparison-expr-then =>
                    NodeTypeIdentifierExpression
                      end-rune = 588
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 588
            NodeTypeExpressionStatement
              end-rune = 615
              input-source = all expr test
              start-rune = 603
              expr-statement-expr =>
                NodeTypeLoopExpression
                  end-rune = 615
                  input-source = all expr test
                  start-rune = 603
                  loop-expr-map-expr =>
                    NodeTypeIdentifierExpression
                      end-rune = 603
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 603
                  loop-expr-stream-expr =>
                    NodeTypeIdentifierExpression
                      end-rune = 614
                      identexpr-name = c
                      input-source = all expr test
                      start-rune = 614
                  named-value =>
                    NodeTypeNamedValue
                      end-rune = 609
                      input-source = all expr test
                      named = b
                      start-rune = 609
            NodeTypeExpressionStatement
              end-rune = 622
              input-source = all expr test
              start-rune = 617
              expr-statement-expr =>
                NodeKeywordNotExpression
                  end-rune = 621
                  input-source = all expr test
                  start-rune = 621
                  unary-expression-child =>
                    NodeTypeIdentifierExpression
                      end-rune = 621
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 621
            NodeTypeExpressionStatement
              end-rune = 626
              input-source = all expr test
              start-rune = 624
              expr-statement-expr =>
                NodeAssertNotNullExpression
                  end-rune = 626
                  input-source = all expr test
                  start-rune = 624
                  unary-expression-child =>
                    NodeTypeIdentifierExpression
                      end-rune = 624
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 624
            NodeTypeExpressionStatement
              end-rune = 654
              input-source = all expr test
              start-rune = 628
              expr-statement-expr =>
                NodeSliceLiteralExpression
                  end-rune = 653
                  input-source = all expr test
                  start-rune = 628
                  slice-literal-expr-type =>
                    NodeTypeTypeReference
                      end-rune = 635
                      input-source = all expr test
                      start-rune = 630
                      typereference-path =>
                        NodeTypeIdentifierPath
                          end-rune = 635
                          input-source = all expr test
                          start-rune = 630
                          identifierpath-root =>
                            NodeTypeIdentifierAccess
                              end-rune = 635
                              identifieraccess-name = string
                              input-source = all expr test
                              start-rune = 630
                  slice-literal-expr-value =>
                    NodeStringLiteralExpression
                      end-rune = 643
                      input-source = all expr test
                      literal-value = 'hello'
                      start-rune = 637
                    NodeStringLiteralExpression
                      end-rune = 652
                      input-source = all expr test
                      literal-value = 'world'
                      start-rune = 646
            NodeTypeExpressionStatement
              end-rune = 666
              input-source = all expr test
              start-rune = 656
              expr-statement-expr =>
                NodeSliceLiteralExpression
                  end-rune = 665
                  input-source = all expr test
                  start-rune = 656
                  slice-literal-expr-type =>
                    NodeTypeTypeReference
                      end-rune = 663
                      input-source = all expr test
                      start-rune = 658
                      typereference-path =>
                        NodeTypeIdentifierPath
                          end-rune = 663
                          input-source = all expr test
                          start-rune = 658
                          identifierpath-root =>
                            NodeTypeIdentifierAccess
                              end-rune = 663
                              identifieraccess-name = string
                              input-source = all expr test
                              start-rune = 658
            NodeTypeExpressionStatement
              end-rune = 695
              input-source = all expr test
              start-rune = 668
              expr-statement-expr =>
                NodeMappingLiteralExpression
                  end-rune = 694
                  input-source = all expr test
                  start-rune = 668
                  mapping-literal-expr-entry =>
                    NodeMappingLiteralExpressionEntry
                      end-rune = 683
                      input-source = all expr test
                      start-rune = 676
                      mapping-literal-entry-key =>
                        NodeStringLiteralExpression
                          end-rune = 680
                          input-source = all expr test
                          literal-value = 'foo'
                          start-rune = 676
                      mapping-literal-entry-value =>
                        NodeNumericLiteralExpression
                          end-rune = 683
                          input-source = all expr test
                          literal-value = 2
                          start-rune = 683
                    NodeMappingLiteralExpressionEntry
                      end-rune = 693
                      input-source = all expr test
                      start-rune = 686
                      mapping-literal-entry-key =>
                        NodeStringLiteralExpression
                          end-rune = 690
                          input-source = all expr test
                          literal-value = 'bar'
                          start-rune = 686
                      mapping-literal-entry-value =>
                        NodeNumericLiteralExpression
                          end-rune = 693
                          input-source = all expr test
                          literal-value = 3
                          start-rune = 693
                  mapping-literal-expr-type =>
                    NodeTypeTypeReference
                      end-rune = 673
                      input-source = all expr test
                      start-rune = 671
                      typereference-path =>
                        NodeTypeIdentifierPath
                          end-rune = 673
                          input-source = all expr test
                          start-rune = 671
                          identifierpath-root =>
                            NodeTypeIdentifierAccess
                              end-rune = 673
                              identifieraccess-name = int
                              input-source = all expr test
                              start-rune = 671
            NodeTypeExpressionStatement
              end-rune = 706
              input-source = all expr test
              start-rune = 697
              expr-statement-expr =>
                NodeMappingLiteralExpression
                  end-rune = 705
                  input-source = all expr test
                  start-rune = 697
                  mapping-literal-expr-type =>
                    NodeTypeTypeReference
                      end-rune = 702
                      input-source = all expr test
                      start-rune = 700
                      typereference-path =>
                        NodeTypeIdentifierPath
                          end-rune = 702
                          input-source = all expr test
                          start-rune = 700
                          identifierpath-root =>
                            NodeTypeIdentifierAccess
                              end-rune = 702
                              identifieraccess-name = int
                              input-source = all expr test
                              start-rune = 700
            NodeTypeExpressionStatement
              end-rune = 818
              input-source = all expr test
              start-rune = 708
              expr-statement-expr =>
                NodeStructuralNewExpression
                  end-rune = 818
                  input-source = all expr test
                  start-rune = 708
                  structural-new-entry =>
                    NodeStructuralNewExpressionEntry
                      end-rune = 734
                      input-source = all expr test
                      start-rune = 722
                      structural-new-entry-key = FirstField
                      structural-new-entry-value =>
                        NodeNumericLiteralExpression
                          end-rune = 734
                          input-source = all expr test
                          literal-value = 1
                          start-rune = 734
                    NodeStructuralNewExpressionEntry
                      end-rune = 752
                      input-source = all expr test
                      start-rune = 739
                      structural-new-entry-key = SecondField
                      structural-new-entry-value =>
                        NodeNumericLiteralExpression
                          end-rune = 752
                          input-source = all expr test
                          literal-value = 2
                          start-rune = 752
                    NodeStructuralNewExpressionEntry
                      end-rune = 813
                      input-source = all expr test
                      start-rune = 757
                      structural-new-entry-key = NestedField
                      structural-new-entry-value =>
                        NodeStructuralNewExpression
                          end-rune = 814
                          input-source = all expr test
                          start-rune = 770
                          structural-new-entry =>
                            NodeStructuralNewExpressionEntry
                              end-rune = 808
                              input-source = all expr test
                              start-rune = 788
                              structural-new-entry-key = NestedField
                              structural-new-entry-value =>
                                NodeStringLiteralExpression
                                  end-rune = 808
                                  input-source = all expr test
                                  literal-value = 'hello!'
                                  start-rune = 801
                          structural-new-type-expr =>
                            NodeTypeIdentifierExpression
                              end-rune = 782
                              identexpr-name = AnotherStruct
                              input-source = all expr test
                              start-rune = 770
                  structural-new-type-expr =>
                    NodeTypeIdentifierExpression
                      end-rune = 717
                      identexpr-name = SomeStruct
                      input-source = all expr test
                      start-rune = 708
            NodeTypeExpressionStatement
              end-rune = 823
              input-source = all expr test
              start-rune = 820
              expr-statement-expr =>
                NodeBinaryAddExpression
                  end-rune = 822
                  input-source = all expr test
                  start-rune = 820
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 820
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 820
                  binary-expression-right =>
                    NodeNumericLiteralExpression
                      end-rune = 822
                      input-source = all expr test
                      literal-value = 1
                      start-rune = 822
            NodeTypeExpressionStatement
              end-rune = 828
              input-source = all expr test
              start-rune = 825
              expr-statement-expr =>
                NodeBinarySubtractExpression
                  end-rune = 827
                  input-source = all expr test
                  start-rune = 825
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 825
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 825
                  binary-expression-right =>
                    NodeNumericLiteralExpression
                      end-rune = 827
                      input-source = all expr test
                      literal-value = 1
                      start-rune = 827
            NodeTypeExpressionStatement
              end-rune = 832
              input-source = all expr test
              start-rune = 830
              expr-statement-expr =>
                NodeNumericLiteralExpression
                  end-rune = 831
                  input-source = all expr test
                  literal-value = -1
                  start-rune = 830
            NodeTypeExpressionStatement
              end-rune = 838
              input-source = all expr test
              start-rune = 834
              expr-statement-expr =>
                NodeNumericLiteralExpression
                  end-rune = 837
                  input-source = all expr test
                  literal-value = 1234
                  start-rune = 834
      typemember-return-type =>
        NodeTypeVoid
          end-rune = 12
          input-source = all expr test
          start-rune = 9