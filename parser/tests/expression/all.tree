NodeTypeFile
  end-rune = 543
  input-source = all expr test
  start-rune = 0
  child-node =>
    NodeTypeFunction
      end-rune = 543
      input-source = all expr test
      named = SomeFunction
      start-rune = 0
      definition-body =>
        NodeTypeStatementBlock
          end-rune = 543
          input-source = all expr test
          start-rune = 30
          block-child =>
            NodeTypeExpressionStatement
              end-rune = 37
              input-source = all expr test
              start-rune = 33
              expr-statement-expr =>
                NodeTypeAwaitExpression
                  end-rune = 36
                  input-source = all expr test
                  start-rune = 36
                  await-expression-source =>
                    NodeTypeIdentifierExpression
                      end-rune = 36
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 36
            NodeTypeExpressionStatement
              end-rune = 44
              input-source = all expr test
              start-rune = 39
              expr-statement-expr =>
                NodeBinaryAddExpression
                  end-rune = 43
                  input-source = all expr test
                  start-rune = 39
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 39
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 39
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 43
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 43
            NodeTypeExpressionStatement
              end-rune = 51
              input-source = all expr test
              start-rune = 46
              expr-statement-expr =>
                NodeBinarySubtractExpression
                  end-rune = 50
                  input-source = all expr test
                  start-rune = 46
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 46
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 46
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 50
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 50
            NodeTypeExpressionStatement
              end-rune = 58
              input-source = all expr test
              start-rune = 53
              expr-statement-expr =>
                NodeBinaryMultiplyExpression
                  end-rune = 57
                  input-source = all expr test
                  start-rune = 53
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 53
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 53
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 57
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 57
            NodeTypeExpressionStatement
              end-rune = 65
              input-source = all expr test
              start-rune = 60
              expr-statement-expr =>
                NodeBinaryDivideExpression
                  end-rune = 64
                  input-source = all expr test
                  start-rune = 60
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 60
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 60
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 64
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 64
            NodeTypeExpressionStatement
              end-rune = 72
              input-source = all expr test
              start-rune = 67
              expr-statement-expr =>
                NodeBinaryModuloExpression
                  end-rune = 71
                  input-source = all expr test
                  start-rune = 67
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 67
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 67
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 71
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 71
            NodeTypeExpressionStatement
              end-rune = 79
              input-source = all expr test
              start-rune = 74
              expr-statement-expr =>
                NodeBitwiseOrExpression
                  end-rune = 78
                  input-source = all expr test
                  start-rune = 74
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 74
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 74
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 78
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 78
            NodeTypeExpressionStatement
              end-rune = 86
              input-source = all expr test
              start-rune = 81
              expr-statement-expr =>
                NodeBitwiseAndExpression
                  end-rune = 85
                  input-source = all expr test
                  start-rune = 81
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 81
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 81
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 85
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 85
            NodeTypeExpressionStatement
              end-rune = 93
              input-source = all expr test
              start-rune = 88
              expr-statement-expr =>
                NodeBitwiseXorExpression
                  end-rune = 92
                  input-source = all expr test
                  start-rune = 88
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 88
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 88
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 92
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 92
            NodeTypeExpressionStatement
              end-rune = 101
              input-source = all expr test
              start-rune = 95
              expr-statement-expr =>
                NodeBitwiseShiftLeftExpression
                  end-rune = 100
                  input-source = all expr test
                  start-rune = 95
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 95
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 95
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 100
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 100
            NodeTypeExpressionStatement
              end-rune = 109
              input-source = all expr test
              start-rune = 103
              expr-statement-expr =>
                NodeBooleanAndExpression
                  end-rune = 108
                  input-source = all expr test
                  start-rune = 103
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 103
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 103
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 108
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 108
            NodeTypeExpressionStatement
              end-rune = 117
              input-source = all expr test
              start-rune = 111
              expr-statement-expr =>
                NodeBooleanOrExpression
                  end-rune = 116
                  input-source = all expr test
                  start-rune = 111
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 111
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 111
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 116
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 116
            NodeTypeExpressionStatement
              end-rune = 125
              input-source = all expr test
              start-rune = 119
              expr-statement-expr =>
                NodeComparisonEqualsExpression
                  end-rune = 124
                  input-source = all expr test
                  start-rune = 119
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 119
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 119
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 124
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 124
            NodeTypeExpressionStatement
              end-rune = 133
              input-source = all expr test
              start-rune = 127
              expr-statement-expr =>
                NodeComparisonNotEqualsExpression
                  end-rune = 132
                  input-source = all expr test
                  start-rune = 127
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 127
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 127
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 132
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 132
            NodeTypeExpressionStatement
              end-rune = 141
              input-source = all expr test
              start-rune = 135
              expr-statement-expr =>
                NodeComparisonLTEExpression
                  end-rune = 140
                  input-source = all expr test
                  start-rune = 135
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 135
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 135
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 140
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 140
            NodeTypeExpressionStatement
              end-rune = 149
              input-source = all expr test
              start-rune = 143
              expr-statement-expr =>
                NodeComparisonGTEExpression
                  end-rune = 148
                  input-source = all expr test
                  start-rune = 143
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 143
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 143
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 148
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 148
            NodeTypeExpressionStatement
              end-rune = 156
              input-source = all expr test
              start-rune = 151
              expr-statement-expr =>
                NodeComparisonLTExpression
                  end-rune = 155
                  input-source = all expr test
                  start-rune = 151
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 151
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 151
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 155
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 155
            NodeTypeExpressionStatement
              end-rune = 163
              input-source = all expr test
              start-rune = 158
              expr-statement-expr =>
                NodeComparisonGTExpression
                  end-rune = 162
                  input-source = all expr test
                  start-rune = 158
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 158
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 158
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 162
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 162
            NodeTypeExpressionStatement
              end-rune = 171
              input-source = all expr test
              start-rune = 165
              expr-statement-expr =>
                NodeNullComparisonExpression
                  end-rune = 170
                  input-source = all expr test
                  start-rune = 165
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 165
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 165
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 170
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 170
            NodeTypeExpressionStatement
              end-rune = 179
              input-source = all expr test
              start-rune = 173
              expr-statement-expr =>
                NodeDefineRangeExpression
                  end-rune = 178
                  input-source = all expr test
                  start-rune = 173
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 173
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 173
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 178
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 178
            NodeTypeExpressionStatement
              end-rune = 184
              input-source = all expr test
              start-rune = 181
              expr-statement-expr =>
                NodeMemberAccessExpression
                  end-rune = 183
                  input-source = all expr test
                  member-access-identifier = b
                  start-rune = 181
                  member-access-expr =>
                    NodeTypeIdentifierExpression
                      end-rune = 181
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 181
            NodeTypeExpressionStatement
              end-rune = 190
              input-source = all expr test
              start-rune = 186
              expr-statement-expr =>
                NodeDynamicMemberAccessExpression
                  end-rune = 189
                  input-source = all expr test
                  member-access-identifier = b
                  start-rune = 186
                  member-access-expr =>
                    NodeTypeIdentifierExpression
                      end-rune = 186
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 186
            NodeTypeExpressionStatement
              end-rune = 196
              input-source = all expr test
              start-rune = 192
              expr-statement-expr =>
                NodeNullableMemberAccessExpression
                  end-rune = 195
                  input-source = all expr test
                  member-access-identifier = b
                  start-rune = 192
                  member-access-expr =>
                    NodeTypeIdentifierExpression
                      end-rune = 192
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 192
            NodeTypeExpressionStatement
              end-rune = 202
              input-source = all expr test
              start-rune = 198
              expr-statement-expr =>
                NodeStreamMemberAccessExpression
                  end-rune = 201
                  input-source = all expr test
                  member-access-identifier = b
                  start-rune = 198
                  member-access-expr =>
                    NodeTypeIdentifierExpression
                      end-rune = 198
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 198
            NodeTypeExpressionStatement
              end-rune = 209
              input-source = all expr test
              start-rune = 204
              expr-statement-expr =>
                NodeCastExpression
                  end-rune = 208
                  input-source = all expr test
                  start-rune = 204
                  cast-expr-expr =>
                    NodeTypeIdentifierExpression
                      end-rune = 204
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 204
                  cast-expr-type =>
                    NodeTypeTypeReference
                      end-rune = 207
                      input-source = all expr test
                      start-rune = 207
                      typereference-path =>
                        NodeTypeIdentifierPath
                          end-rune = 207
                          input-source = all expr test
                          start-rune = 207
                          identifierpath-root =>
                            NodeTypeIdentifierAccess
                              end-rune = 207
                              identifieraccess-name = b
                              input-source = all expr test
                              start-rune = 207
            NodeTypeExpressionStatement
              end-rune = 221
              input-source = all expr test
              start-rune = 211
              expr-statement-expr =>
                NodeFunctionCallExpression
                  end-rune = 220
                  input-source = all expr test
                  start-rune = 211
                  function-call-argument =>
                    NodeTypeIdentifierExpression
                      end-rune = 213
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 213
                    NodeTypeIdentifierExpression
                      end-rune = 216
                      identexpr-name = c
                      input-source = all expr test
                      start-rune = 216
                    NodeTypeIdentifierExpression
                      end-rune = 219
                      identexpr-name = d
                      input-source = all expr test
                      start-rune = 219
                  function-call-expr =>
                    NodeTypeIdentifierExpression
                      end-rune = 211
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 211
            NodeTypeExpressionStatement
              end-rune = 227
              input-source = all expr test
              start-rune = 223
              expr-statement-expr =>
                NodeSliceExpression
                  end-rune = 226
                  input-source = all expr test
                  start-rune = 223
                  slice-expr-expr =>
                    NodeTypeIdentifierExpression
                      end-rune = 223
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 223
                  slice-expr-index =>
                    NodeTypeIdentifierExpression
                      end-rune = 225
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 225
            NodeTypeExpressionStatement
              end-rune = 234
              input-source = all expr test
              start-rune = 229
              expr-statement-expr =>
                NodeSliceExpression
                  end-rune = 233
                  input-source = all expr test
                  start-rune = 229
                  slice-expr-expr =>
                    NodeTypeIdentifierExpression
                      end-rune = 229
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 229
                  slice-expr-left-index =>
                    NodeTypeIdentifierExpression
                      end-rune = 231
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 231
            NodeTypeExpressionStatement
              end-rune = 241
              input-source = all expr test
              start-rune = 236
              expr-statement-expr =>
                NodeSliceExpression
                  end-rune = 240
                  input-source = all expr test
                  start-rune = 236
                  slice-expr-expr =>
                    NodeTypeIdentifierExpression
                      end-rune = 236
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 236
                  slice-expr-right-index =>
                    NodeTypeIdentifierExpression
                      end-rune = 239
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 239
            NodeTypeExpressionStatement
              end-rune = 249
              input-source = all expr test
              start-rune = 243
              expr-statement-expr =>
                NodeSliceExpression
                  end-rune = 248
                  input-source = all expr test
                  start-rune = 243
                  slice-expr-expr =>
                    NodeTypeIdentifierExpression
                      end-rune = 243
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 243
                  slice-expr-left-index =>
                    NodeTypeIdentifierExpression
                      end-rune = 245
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 245
                  slice-expr-right-index =>
                    NodeTypeIdentifierExpression
                      end-rune = 247
                      identexpr-name = c
                      input-source = all expr test
                      start-rune = 247
            NodeTypeExpressionStatement
              end-rune = 253
              input-source = all expr test
              start-rune = 251
              expr-statement-expr =>
                NodeBooleanNotExpression
                  end-rune = 252
                  input-source = all expr test
                  start-rune = 252
                  unary-expression-child =>
                    NodeTypeIdentifierExpression
                      end-rune = 252
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 252
            NodeTypeExpressionStatement
              end-rune = 257
              input-source = all expr test
              start-rune = 255
              expr-statement-expr =>
                NodeRootTypeExpression
                  end-rune = 256
                  input-source = all expr test
                  start-rune = 256
                  unary-expression-child =>
                    NodeTypeIdentifierExpression
                      end-rune = 256
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 256
            NodeTypeExpressionStatement
              end-rune = 266
              input-source = all expr test
              start-rune = 259
              expr-statement-expr =>
                NodeBinaryAddExpression
                  end-rune = 264
                  input-source = all expr test
                  start-rune = 260
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 260
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 260
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 264
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 264
            NodeTypeExpressionStatement
              end-rune = 272
              input-source = all expr test
              start-rune = 268
              expr-statement-expr =>
                NodeNumericLiteralExpression
                  end-rune = 271
                  input-source = all expr test
                  literal-value = 1234
                  start-rune = 268
            NodeTypeExpressionStatement
              end-rune = 279
              input-source = all expr test
              start-rune = 274
              expr-statement-expr =>
                NodeNumericLiteralExpression
                  end-rune = 278
                  input-source = all expr test
                  literal-value = 1.245
                  start-rune = 274
            NodeTypeExpressionStatement
              end-rune = 284
              input-source = all expr test
              start-rune = 281
              expr-statement-expr =>
                NodeNumericLiteralExpression
                  end-rune = 283
                  input-source = all expr test
                  literal-value = 42f
                  start-rune = 281
            NodeTypeExpressionStatement
              end-rune = 291
              input-source = all expr test
              start-rune = 286
              expr-statement-expr =>
                NodeNumericLiteralExpression
                  end-rune = 290
                  input-source = all expr test
                  literal-value = 42.5f
                  start-rune = 286
            NodeTypeExpressionStatement
              end-rune = 297
              input-source = all expr test
              start-rune = 293
              expr-statement-expr =>
                NodeBooleanLiteralExpression
                  end-rune = 296
                  input-source = all expr test
                  literal-value = true
                  start-rune = 293
            NodeTypeExpressionStatement
              end-rune = 304
              input-source = all expr test
              start-rune = 299
              expr-statement-expr =>
                NodeBooleanLiteralExpression
                  end-rune = 303
                  input-source = all expr test
                  literal-value = false
                  start-rune = 299
            NodeTypeExpressionStatement
              end-rune = 319
              input-source = all expr test
              start-rune = 306
              expr-statement-expr =>
                NodeStringLiteralExpression
                  end-rune = 318
                  input-source = all expr test
                  literal-value = 'hello world'
                  start-rune = 306
            NodeTypeExpressionStatement
              end-rune = 334
              input-source = all expr test
              start-rune = 321
              expr-statement-expr =>
                NodeStringLiteralExpression
                  end-rune = 333
                  input-source = all expr test
                  literal-value = "hello world"
                  start-rune = 321
            NodeTypeExpressionStatement
              end-rune = 350
              input-source = all expr test
              start-rune = 336
              expr-statement-expr =>
                NodeTypeTemplateString
                  end-rune = 349
                  input-source = all expr test
                  start-rune = 336
                  template-string-piece =>
                    NodeStringLiteralExpression
                      literal-value = `hello
	world`
            NodeTypeExpressionStatement
              end-rune = 354
              input-source = all expr test
              start-rune = 352
              expr-statement-expr =>
                NodeListExpression
                  end-rune = 353
                  input-source = all expr test
                  start-rune = 352
            NodeTypeExpressionStatement
              end-rune = 359
              input-source = all expr test
              start-rune = 356
              expr-statement-expr =>
                NodeListExpression
                  end-rune = 358
                  input-source = all expr test
                  start-rune = 356
                  list-expr-value =>
                    NodeNumericLiteralExpression
                      end-rune = 357
                      input-source = all expr test
                      literal-value = 1
                      start-rune = 357
            NodeTypeExpressionStatement
              end-rune = 370
              input-source = all expr test
              start-rune = 361
              expr-statement-expr =>
                NodeListExpression
                  end-rune = 369
                  input-source = all expr test
                  start-rune = 361
                  list-expr-value =>
                    NodeNumericLiteralExpression
                      end-rune = 362
                      input-source = all expr test
                      literal-value = 1
                      start-rune = 362
                    NodeNumericLiteralExpression
                      end-rune = 365
                      input-source = all expr test
                      literal-value = 2
                      start-rune = 365
                    NodeNumericLiteralExpression
                      end-rune = 368
                      input-source = all expr test
                      literal-value = 3
                      start-rune = 368
            NodeTypeExpressionStatement
              end-rune = 381
              input-source = all expr test
              start-rune = 372
              expr-statement-expr =>
                NodeBitwiseNotExpression
                  end-rune = 380
                  input-source = all expr test
                  start-rune = 373
                  unary-expression-child =>
                    NodeTypeIdentifierExpression
                      end-rune = 380
                      identexpr-name = someName
                      input-source = all expr test
                      start-rune = 373
            NodeTypeExpressionStatement
              end-rune = 392
              input-source = all expr test
              start-rune = 383
              expr-statement-expr =>
                NodeBooleanNotExpression
                  end-rune = 391
                  input-source = all expr test
                  start-rune = 384
                  unary-expression-child =>
                    NodeTypeIdentifierExpression
                      end-rune = 391
                      identexpr-name = someName
                      input-source = all expr test
                      start-rune = 384
            NodeTypeExpressionStatement
              end-rune = 444
              input-source = all expr test
              start-rune = 394
              expr-statement-expr =>
                NodeTypeLambdaExpression
                  end-rune = 443
                  input-source = all expr test
                  start-rune = 394
                  lambda-expression-block =>
                    NodeTypeStatementBlock
                      end-rune = 443
                      input-source = all expr test
                      start-rune = 428
                      block-child =>
                        NodeTypeReturnStatement
                          end-rune = 441
                          input-source = all expr test
                          start-rune = 430
                          return-expr =>
                            NodeTypeIdentifierExpression
                              end-rune = 441
                              identexpr-name = first
                              input-source = all expr test
                              start-rune = 437
                  lambda-expression-parameter =>
                    NodeTypeParameter
                      end-rune = 412
                      input-source = all expr test
                      named = first
                      start-rune = 404
                      parameter-type =>
                        NodeTypeTypeReference
                          end-rune = 412
                          input-source = all expr test
                          start-rune = 410
                          typereference-path =>
                            NodeTypeIdentifierPath
                              end-rune = 412
                              input-source = all expr test
                              start-rune = 410
                              identifierpath-root =>
                                NodeTypeIdentifierAccess
                                  end-rune = 412
                                  identifieraccess-name = int
                                  input-source = all expr test
                                  start-rune = 410
                    NodeTypeParameter
                      end-rune = 425
                      input-source = all expr test
                      named = second
                      start-rune = 415
                      parameter-type =>
                        NodeTypeTypeReference
                          end-rune = 425
                          input-source = all expr test
                          start-rune = 422
                          typereference-path =>
                            NodeTypeIdentifierPath
                              end-rune = 425
                              input-source = all expr test
                              start-rune = 422
                              identifierpath-root =>
                                NodeTypeIdentifierAccess
                                  end-rune = 425
                                  identifieraccess-name = bool
                                  input-source = all expr test
                                  start-rune = 422
            NodeTypeExpressionStatement
              end-rune = 460
              input-source = all expr test
              start-rune = 446
              expr-statement-expr =>
                NodeTypeLambdaExpression
                  end-rune = 459
                  input-source = all expr test
                  start-rune = 446
                  lambda-expression-child-expr =>
                    NodeTypeIdentifierExpression
                      end-rune = 459
                      identexpr-name = someExpr
                      input-source = all expr test
                      start-rune = 452
            NodeTypeExpressionStatement
              end-rune = 464
              input-source = all expr test
              start-rune = 462
              expr-statement-expr =>
                NodeMapExpression
                  end-rune = 463
                  input-source = all expr test
                  start-rune = 462
            NodeTypeExpressionStatement
              end-rune = 480
              input-source = all expr test
              start-rune = 466
              expr-statement-expr =>
                NodeMapExpression
                  end-rune = 479
                  input-source = all expr test
                  start-rune = 466
                  map-expr-entry =>
                    NodeMapExpressionEntry
                      end-rune = 475
                      input-source = all expr test
                      start-rune = 470
                      map-entry-key =>
                        NodeStringLiteralExpression
                          end-rune = 472
                          input-source = all expr test
                          literal-value = 'a'
                          start-rune = 470
                      map-entry-value =>
                        NodeNumericLiteralExpression
                          end-rune = 475
                          input-source = all expr test
                          literal-value = 2
                          start-rune = 475
            NodeTypeExpressionStatement
              end-rune = 494
              input-source = all expr test
              start-rune = 482
              expr-statement-expr =>
                NodeMapExpression
                  end-rune = 493
                  input-source = all expr test
                  start-rune = 482
                  map-expr-entry =>
                    NodeMapExpressionEntry
                      end-rune = 489
                      input-source = all expr test
                      start-rune = 486
                      map-entry-key =>
                        NodeTypeIdentifierExpression
                          end-rune = 486
                          identexpr-name = a
                          input-source = all expr test
                          start-rune = 486
                      map-entry-value =>
                        NodeNumericLiteralExpression
                          end-rune = 489
                          input-source = all expr test
                          literal-value = 2
                          start-rune = 489
            NodeTypeExpressionStatement
              end-rune = 500
              input-source = all expr test
              start-rune = 496
              expr-statement-expr =>
                NodeNullLiteralExpression
                  end-rune = 499
                  input-source = all expr test
                  start-rune = 496
            NodeTypeExpressionStatement
              end-rune = 506
              input-source = all expr test
              start-rune = 502
              expr-statement-expr =>
                NodeThisLiteralExpression
                  end-rune = 505
                  input-source = all expr test
                  start-rune = 502
            NodeTypeExpressionStatement
              end-rune = 512
              input-source = all expr test
              start-rune = 508
              expr-statement-expr =>
                NodeGenericSpecifierExpression
                  end-rune = 511
                  input-source = all expr test
                  start-rune = 508
                  generic-specifier-expr =>
                    NodeTypeIdentifierExpression
                      end-rune = 508
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 508
                  generic-specifier-type =>
                    NodeTypeTypeReference
                      end-rune = 510
                      input-source = all expr test
                      start-rune = 510
                      typereference-path =>
                        NodeTypeIdentifierPath
                          end-rune = 510
                          input-source = all expr test
                          start-rune = 510
                          identifierpath-root =>
                            NodeTypeIdentifierAccess
                              end-rune = 510
                              identifieraccess-name = b
                              input-source = all expr test
                              start-rune = 510
            NodeTypeExpressionStatement
              end-rune = 522
              input-source = all expr test
              start-rune = 514
              expr-statement-expr =>
                NodeGenericSpecifierExpression
                  end-rune = 521
                  input-source = all expr test
                  start-rune = 514
                  generic-specifier-expr =>
                    NodeTypeIdentifierExpression
                      end-rune = 514
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 514
                  generic-specifier-type =>
                    NodeTypeNullable
                      end-rune = 520
                      input-source = all expr test
                      start-rune = 516
                      typereference-inner-type =>
                        NodeTypeTypeReference
                          end-rune = 519
                          input-source = all expr test
                          start-rune = 516
                          typereference-generic =>
                            NodeTypeTypeReference
                              end-rune = 518
                              input-source = all expr test
                              start-rune = 518
                              typereference-path =>
                                NodeTypeIdentifierPath
                                  end-rune = 518
                                  input-source = all expr test
                                  start-rune = 518
                                  identifierpath-root =>
                                    NodeTypeIdentifierAccess
                                      end-rune = 518
                                      identifieraccess-name = c
                                      input-source = all expr test
                                      start-rune = 518
                          typereference-path =>
                            NodeTypeIdentifierPath
                              end-rune = 516
                              input-source = all expr test
                              start-rune = 516
                              identifierpath-root =>
                                NodeTypeIdentifierAccess
                                  end-rune = 516
                                  identifieraccess-name = b
                                  input-source = all expr test
                                  start-rune = 516
            NodeTypeExpressionStatement
              end-rune = 530
              input-source = all expr test
              start-rune = 524
              expr-statement-expr =>
                NodeInCollectionExpression
                  end-rune = 529
                  input-source = all expr test
                  start-rune = 524
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 524
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 524
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 529
                      identexpr-name = b
                      input-source = all expr test
                      start-rune = 529
            NodeTypeExpressionStatement
              end-rune = 542
              input-source = all expr test
              start-rune = 532
              expr-statement-expr =>
                NodeInCollectionExpression
                  end-rune = 541
                  input-source = all expr test
                  start-rune = 532
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 532
                      identexpr-name = a
                      input-source = all expr test
                      start-rune = 532
                  binary-expression-right =>
                    NodeMemberAccessExpression
                      end-rune = 541
                      input-source = all expr test
                      member-access-identifier = foo
                      start-rune = 537
                      member-access-expr =>
                        NodeTypeIdentifierExpression
                          end-rune = 537
                          identexpr-name = b
                          input-source = all expr test
                          start-rune = 537
      typemember-return-type =>
        NodeTypeVoid
          end-rune = 12
          input-source = all expr test
          start-rune = 9