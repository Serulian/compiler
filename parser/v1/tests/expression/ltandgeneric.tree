NodeTypeFile
  end-rune = 71
  input-source = less than and generic specifier expr test
  start-rune = 0
  child-node =>
    NodeTypeFunction
      end-rune = 36
      input-source = less than and generic specifier expr test
      named = DoSomethingElse
      start-rune = 0
      definition-body =>
        NodeTypeStatementBlock
          end-rune = 36
          input-source = less than and generic specifier expr test
          start-rune = 27
          block-child =>
            NodeTypeExpressionStatement
              end-rune = 34
              input-source = less than and generic specifier expr test
              start-rune = 30
              expr-statement-expr =>
                NodeGenericSpecifierExpression
                  end-rune = 33
                  input-source = less than and generic specifier expr test
                  start-rune = 30
                  generic-specifier-expr =>
                    NodeTypeIdentifierExpression
                      end-rune = 30
                      identexpr-name = a
                      input-source = less than and generic specifier expr test
                      start-rune = 30
                  generic-specifier-type =>
                    NodeTypeTypeReference
                      end-rune = 32
                      input-source = less than and generic specifier expr test
                      start-rune = 32
                      typereference-path =>
                        NodeTypeIdentifierPath
                          end-rune = 32
                          input-source = less than and generic specifier expr test
                          start-rune = 32
                          identifierpath-root =>
                            NodeTypeIdentifierAccess
                              end-rune = 32
                              identifieraccess-name = b
                              input-source = less than and generic specifier expr test
                              start-rune = 32
    NodeTypeFunction
      end-rune = 71
      input-source = less than and generic specifier expr test
      named = DoSomething
      start-rune = 38
      definition-body =>
        NodeTypeStatementBlock
          end-rune = 71
          input-source = less than and generic specifier expr test
          start-rune = 61
          block-child =>
            NodeTypeExpressionStatement
              end-rune = 69
              input-source = less than and generic specifier expr test
              start-rune = 64
              expr-statement-expr =>
                NodeComparisonLTExpression
                  end-rune = 68
                  input-source = less than and generic specifier expr test
                  start-rune = 64
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 64
                      identexpr-name = a
                      input-source = less than and generic specifier expr test
                      start-rune = 64
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 68
                      identexpr-name = b
                      input-source = less than and generic specifier expr test
                      start-rune = 68