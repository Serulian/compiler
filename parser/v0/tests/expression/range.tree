NodeTypeFile
  end-rune = 138
  input-source = range expr test
  start-rune = 0
  child-node =>
    NodeTypeFunction
      end-rune = 138
      input-source = range expr test
      named = DoSomething
      start-rune = 0
      definition-body =>
        NodeTypeStatementBlock
          end-rune = 138
          input-source = range expr test
          start-rune = 29
          block-child =>
            NodeTypeExpressionStatement
              end-rune = 36
              input-source = range expr test
              start-rune = 32
              expr-statement-expr =>
                NodeDefineRangeExpression
                  end-rune = 35
                  input-source = range expr test
                  start-rune = 32
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 32
                      identexpr-name = a
                      input-source = range expr test
                      start-rune = 32
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 35
                      identexpr-name = b
                      input-source = range expr test
                      start-rune = 35
            NodeTypeExpressionStatement
              end-rune = 42
              input-source = range expr test
              start-rune = 38
              expr-statement-expr =>
                NodeDefineRangeExpression
                  end-rune = 41
                  input-source = range expr test
                  start-rune = 38
                  binary-expression-left =>
                    NodeNumericLiteralExpression
                      end-rune = 38
                      input-source = range expr test
                      literal-value = 0
                      start-rune = 38
                  binary-expression-right =>
                    NodeNumericLiteralExpression
                      end-rune = 41
                      input-source = range expr test
                      literal-value = 1
                      start-rune = 41
            NodeTypeExpressionStatement
              end-rune = 49
              input-source = range expr test
              start-rune = 44
              expr-statement-expr =>
                NodeDefineRangeExpression
                  end-rune = 48
                  input-source = range expr test
                  start-rune = 44
                  binary-expression-left =>
                    NodeNumericLiteralExpression
                      end-rune = 45
                      input-source = range expr test
                      literal-value = -1
                      start-rune = 44
                  binary-expression-right =>
                    NodeNumericLiteralExpression
                      end-rune = 48
                      input-source = range expr test
                      literal-value = 1
                      start-rune = 48
            NodeTypeExpressionStatement
              end-rune = 60
              input-source = range expr test
              start-rune = 51
              expr-statement-expr =>
                NodeDefineRangeExpression
                  end-rune = 59
                  input-source = range expr test
                  start-rune = 51
                  binary-expression-left =>
                    NodeNumericLiteralExpression
                      end-rune = 54
                      input-source = range expr test
                      literal-value = -1.1
                      start-rune = 51
                  binary-expression-right =>
                    NodeNumericLiteralExpression
                      end-rune = 59
                      input-source = range expr test
                      literal-value = 5.6
                      start-rune = 57
            NodeTypeExpressionStatement
              end-rune = 70
              input-source = range expr test
              start-rune = 62
              expr-statement-expr =>
                NodeDefineRangeExpression
                  end-rune = 69
                  input-source = range expr test
                  start-rune = 62
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 62
                      identexpr-name = a
                      input-source = range expr test
                      start-rune = 62
                  binary-expression-right =>
                    NodeBinaryAddExpression
                      end-rune = 69
                      input-source = range expr test
                      start-rune = 65
                      binary-expression-left =>
                        NodeTypeIdentifierExpression
                          end-rune = 65
                          identexpr-name = b
                          input-source = range expr test
                          start-rune = 65
                      binary-expression-right =>
                        NodeNumericLiteralExpression
                          end-rune = 69
                          input-source = range expr test
                          literal-value = 1
                          start-rune = 69
            NodeTypeExpressionStatement
              end-rune = 80
              input-source = range expr test
              start-rune = 72
              expr-statement-expr =>
                NodeDefineRangeExpression
                  end-rune = 79
                  input-source = range expr test
                  start-rune = 72
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 72
                      identexpr-name = a
                      input-source = range expr test
                      start-rune = 72
                  binary-expression-right =>
                    NodeBinarySubtractExpression
                      end-rune = 79
                      input-source = range expr test
                      start-rune = 75
                      binary-expression-left =>
                        NodeTypeIdentifierExpression
                          end-rune = 75
                          identexpr-name = b
                          input-source = range expr test
                          start-rune = 75
                      binary-expression-right =>
                        NodeNumericLiteralExpression
                          end-rune = 79
                          input-source = range expr test
                          literal-value = 1
                          start-rune = 79
            NodeTypeExpressionStatement
              end-rune = 88
              input-source = range expr test
              start-rune = 83
              expr-statement-expr =>
                NodeDefineExclusiveRangeExpression
                  end-rune = 87
                  input-source = range expr test
                  start-rune = 83
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 83
                      identexpr-name = a
                      input-source = range expr test
                      start-rune = 83
                  binary-expression-right =>
                    NodeTypeIdentifierExpression
                      end-rune = 87
                      identexpr-name = b
                      input-source = range expr test
                      start-rune = 87
            NodeTypeExpressionStatement
              end-rune = 95
              input-source = range expr test
              start-rune = 90
              expr-statement-expr =>
                NodeDefineExclusiveRangeExpression
                  end-rune = 94
                  input-source = range expr test
                  start-rune = 90
                  binary-expression-left =>
                    NodeNumericLiteralExpression
                      end-rune = 90
                      input-source = range expr test
                      literal-value = 0
                      start-rune = 90
                  binary-expression-right =>
                    NodeNumericLiteralExpression
                      end-rune = 94
                      input-source = range expr test
                      literal-value = 1
                      start-rune = 94
            NodeTypeExpressionStatement
              end-rune = 103
              input-source = range expr test
              start-rune = 97
              expr-statement-expr =>
                NodeDefineExclusiveRangeExpression
                  end-rune = 102
                  input-source = range expr test
                  start-rune = 97
                  binary-expression-left =>
                    NodeNumericLiteralExpression
                      end-rune = 98
                      input-source = range expr test
                      literal-value = -1
                      start-rune = 97
                  binary-expression-right =>
                    NodeNumericLiteralExpression
                      end-rune = 102
                      input-source = range expr test
                      literal-value = 1
                      start-rune = 102
            NodeTypeExpressionStatement
              end-rune = 115
              input-source = range expr test
              start-rune = 105
              expr-statement-expr =>
                NodeDefineExclusiveRangeExpression
                  end-rune = 114
                  input-source = range expr test
                  start-rune = 105
                  binary-expression-left =>
                    NodeNumericLiteralExpression
                      end-rune = 108
                      input-source = range expr test
                      literal-value = -1.1
                      start-rune = 105
                  binary-expression-right =>
                    NodeNumericLiteralExpression
                      end-rune = 114
                      input-source = range expr test
                      literal-value = 5.6
                      start-rune = 112
            NodeTypeExpressionStatement
              end-rune = 126
              input-source = range expr test
              start-rune = 117
              expr-statement-expr =>
                NodeDefineExclusiveRangeExpression
                  end-rune = 125
                  input-source = range expr test
                  start-rune = 117
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 117
                      identexpr-name = a
                      input-source = range expr test
                      start-rune = 117
                  binary-expression-right =>
                    NodeBinaryAddExpression
                      end-rune = 125
                      input-source = range expr test
                      start-rune = 121
                      binary-expression-left =>
                        NodeTypeIdentifierExpression
                          end-rune = 121
                          identexpr-name = b
                          input-source = range expr test
                          start-rune = 121
                      binary-expression-right =>
                        NodeNumericLiteralExpression
                          end-rune = 125
                          input-source = range expr test
                          literal-value = 1
                          start-rune = 125
            NodeTypeExpressionStatement
              end-rune = 137
              input-source = range expr test
              start-rune = 128
              expr-statement-expr =>
                NodeDefineExclusiveRangeExpression
                  end-rune = 136
                  input-source = range expr test
                  start-rune = 128
                  binary-expression-left =>
                    NodeTypeIdentifierExpression
                      end-rune = 128
                      identexpr-name = a
                      input-source = range expr test
                      start-rune = 128
                  binary-expression-right =>
                    NodeBinarySubtractExpression
                      end-rune = 136
                      input-source = range expr test
                      start-rune = 132
                      binary-expression-left =>
                        NodeTypeIdentifierExpression
                          end-rune = 132
                          identexpr-name = b
                          input-source = range expr test
                          start-rune = 132
                      binary-expression-right =>
                        NodeNumericLiteralExpression
                          end-rune = 136
                          input-source = range expr test
                          literal-value = 1
                          start-rune = 136
      typemember-return-type =>
        NodeTypeVoid
          end-rune = 12
          input-source = range expr test
          start-rune = 9