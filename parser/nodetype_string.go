// Code generated by "stringer -type=NodeType"; DO NOT EDIT

package parser

import "fmt"

const _NodeType_name = "NodeTypeErrorNodeTypeFileNodeTypeCommentNodeTypeDecoratorNodeTypeImportNodeTypeImportPackageNodeTypeClassNodeTypeInterfaceNodeTypeNominalNodeTypeStructNodeTypeGenericNodeTypeFunctionNodeTypeVariableNodeTypeConstructorNodeTypePropertyNodeTypeOperatorNodeTypeFieldNodeTypePropertyBlockNodeTypeParameterNodeTypeMemberTagNodeTypeArrowStatementNodeTypeStatementBlockNodeTypeLoopStatementNodeTypeConditionalStatementNodeTypeReturnStatementNodeTypeYieldStatementNodeTypeRejectStatementNodeTypeBreakStatementNodeTypeContinueStatementNodeTypeVariableStatementNodeTypeWithStatementNodeTypeSwitchStatementNodeTypeMatchStatementNodeTypeAssignStatementNodeTypeResolveStatementNodeTypeExpressionStatementNodeTypeSwitchStatementCaseNodeTypeMatchStatementCaseNodeTypeNamedValueNodeTypeAssignedValueNodeTypeAwaitExpressionNodeTypeLambdaExpressionNodeTypeSmlExpressionNodeTypeSmlAttributeNodeTypeSmlDecoratorNodeTypeSmlTextNodeTypeConditionalExpressionNodeTypeLoopExpressionNodeBitwiseXorExpressionNodeBitwiseOrExpressionNodeBitwiseAndExpressionNodeBitwiseShiftLeftExpressionNodeBitwiseShiftRightExpressionNodeBitwiseNotExpressionNodeBooleanOrExpressionNodeBooleanAndExpressionNodeBooleanNotExpressionNodeRootTypeExpressionNodeComparisonEqualsExpressionNodeComparisonNotEqualsExpressionNodeComparisonLTEExpressionNodeComparisonGTEExpressionNodeComparisonLTExpressionNodeComparisonGTExpressionNodeNullComparisonExpressionNodeIsComparisonExpressionNodeAssertNotNullExpressionNodeInCollectionExpressionNodeDefineRangeExpressionNodeBinaryAddExpressionNodeBinarySubtractExpressionNodeBinaryMultiplyExpressionNodeBinaryDivideExpressionNodeBinaryModuloExpressionNodeMemberAccessExpressionNodeNullableMemberAccessExpressionNodeDynamicMemberAccessExpressionNodeStreamMemberAccessExpressionNodeCastExpressionNodeFunctionCallExpressionNodeSliceExpressionNodeGenericSpecifierExpressionNodeTaggedTemplateLiteralStringNodeTypeTemplateStringNodeNumericLiteralExpressionNodeStringLiteralExpressionNodeBooleanLiteralExpressionNodeThisLiteralExpressionNodeNullLiteralExpressionNodeValLiteralExpressionNodeListExpressionNodeSliceLiteralExpressionNodeMappingLiteralExpressionNodeMappingLiteralExpressionEntryNodeStructuralNewExpressionNodeStructuralNewExpressionEntryNodeMapExpressionNodeMapExpressionEntryNodeTypeIdentifierExpressionNodeTypeLambdaParameterNodeTypeTypeReferenceNodeTypeStreamNodeTypeSliceNodeTypeMappingNodeTypeNullableNodeTypeVoidNodeTypeAnyNodeTypeIdentifierPathNodeTypeIdentifierAccessNodeTypeTagged"

var _NodeType_index = [...]uint16{0, 13, 25, 40, 57, 71, 92, 105, 122, 137, 151, 166, 182, 198, 217, 233, 249, 262, 283, 300, 317, 339, 361, 382, 410, 433, 455, 478, 500, 525, 550, 571, 594, 616, 639, 663, 690, 717, 743, 761, 782, 805, 829, 850, 870, 890, 905, 934, 956, 980, 1003, 1027, 1057, 1088, 1112, 1135, 1159, 1183, 1205, 1235, 1268, 1295, 1322, 1348, 1374, 1402, 1428, 1455, 1481, 1506, 1529, 1557, 1585, 1611, 1637, 1663, 1697, 1730, 1762, 1780, 1806, 1825, 1855, 1886, 1908, 1936, 1963, 1991, 2016, 2041, 2065, 2083, 2109, 2137, 2170, 2197, 2229, 2246, 2268, 2296, 2319, 2340, 2354, 2367, 2382, 2398, 2410, 2421, 2443, 2467, 2481}

func (i NodeType) String() string {
	if i < 0 || i >= NodeType(len(_NodeType_index)-1) {
		return fmt.Sprintf("NodeType(%d)", i)
	}
	return _NodeType_name[_NodeType_index[i]:_NodeType_index[i+1]]
}
